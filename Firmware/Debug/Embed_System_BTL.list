
Embed_System_BTL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006428  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067d0  080067d0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067d0  080067d0  000167d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067d8  080067d8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067d8  080067d8  000167d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067dc  080067dc  000167dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          000002e0  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000354  20000354  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fb89  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f7  00000000  00000000  0002fc2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00031e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c78  00000000  00000000  00032b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000219bb  00000000  00000000  000337f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001047b  00000000  00000000  000551b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbae1  00000000  00000000  0006562e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013110f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003a2c  00000000  00000000  00131160  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006598 	.word	0x08006598

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08006598 	.word	0x08006598

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468e      	mov	lr, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14d      	bne.n	8000ade <__udivmoddi4+0xaa>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4694      	mov	ip, r2
 8000a46:	d969      	bls.n	8000b1c <__udivmoddi4+0xe8>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b152      	cbz	r2, 8000a64 <__udivmoddi4+0x30>
 8000a4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a52:	f1c2 0120 	rsb	r1, r2, #32
 8000a56:	fa20 f101 	lsr.w	r1, r0, r1
 8000a5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a62:	4094      	lsls	r4, r2
 8000a64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a68:	0c21      	lsrs	r1, r4, #16
 8000a6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a6e:	fa1f f78c 	uxth.w	r7, ip
 8000a72:	fb08 e316 	mls	r3, r8, r6, lr
 8000a76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7a:	fb06 f107 	mul.w	r1, r6, r7
 8000a7e:	4299      	cmp	r1, r3
 8000a80:	d90a      	bls.n	8000a98 <__udivmoddi4+0x64>
 8000a82:	eb1c 0303 	adds.w	r3, ip, r3
 8000a86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a8a:	f080 811f 	bcs.w	8000ccc <__udivmoddi4+0x298>
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	f240 811c 	bls.w	8000ccc <__udivmoddi4+0x298>
 8000a94:	3e02      	subs	r6, #2
 8000a96:	4463      	add	r3, ip
 8000a98:	1a5b      	subs	r3, r3, r1
 8000a9a:	b2a4      	uxth	r4, r4
 8000a9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000aa0:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa8:	fb00 f707 	mul.w	r7, r0, r7
 8000aac:	42a7      	cmp	r7, r4
 8000aae:	d90a      	bls.n	8000ac6 <__udivmoddi4+0x92>
 8000ab0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ab4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab8:	f080 810a 	bcs.w	8000cd0 <__udivmoddi4+0x29c>
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	f240 8107 	bls.w	8000cd0 <__udivmoddi4+0x29c>
 8000ac2:	4464      	add	r4, ip
 8000ac4:	3802      	subs	r0, #2
 8000ac6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aca:	1be4      	subs	r4, r4, r7
 8000acc:	2600      	movs	r6, #0
 8000ace:	b11d      	cbz	r5, 8000ad8 <__udivmoddi4+0xa4>
 8000ad0:	40d4      	lsrs	r4, r2
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad8:	4631      	mov	r1, r6
 8000ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d909      	bls.n	8000af6 <__udivmoddi4+0xc2>
 8000ae2:	2d00      	cmp	r5, #0
 8000ae4:	f000 80ef 	beq.w	8000cc6 <__udivmoddi4+0x292>
 8000ae8:	2600      	movs	r6, #0
 8000aea:	e9c5 0100 	strd	r0, r1, [r5]
 8000aee:	4630      	mov	r0, r6
 8000af0:	4631      	mov	r1, r6
 8000af2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af6:	fab3 f683 	clz	r6, r3
 8000afa:	2e00      	cmp	r6, #0
 8000afc:	d14a      	bne.n	8000b94 <__udivmoddi4+0x160>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	d302      	bcc.n	8000b08 <__udivmoddi4+0xd4>
 8000b02:	4282      	cmp	r2, r0
 8000b04:	f200 80f9 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b08:	1a84      	subs	r4, r0, r2
 8000b0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0e:	2001      	movs	r0, #1
 8000b10:	469e      	mov	lr, r3
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	d0e0      	beq.n	8000ad8 <__udivmoddi4+0xa4>
 8000b16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b1a:	e7dd      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000b1c:	b902      	cbnz	r2, 8000b20 <__udivmoddi4+0xec>
 8000b1e:	deff      	udf	#255	; 0xff
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	2a00      	cmp	r2, #0
 8000b26:	f040 8092 	bne.w	8000c4e <__udivmoddi4+0x21a>
 8000b2a:	eba1 010c 	sub.w	r1, r1, ip
 8000b2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b32:	fa1f fe8c 	uxth.w	lr, ip
 8000b36:	2601      	movs	r6, #1
 8000b38:	0c20      	lsrs	r0, r4, #16
 8000b3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b46:	fb0e f003 	mul.w	r0, lr, r3
 8000b4a:	4288      	cmp	r0, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0x12c>
 8000b4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b56:	d202      	bcs.n	8000b5e <__udivmoddi4+0x12a>
 8000b58:	4288      	cmp	r0, r1
 8000b5a:	f200 80cb 	bhi.w	8000cf4 <__udivmoddi4+0x2c0>
 8000b5e:	4643      	mov	r3, r8
 8000b60:	1a09      	subs	r1, r1, r0
 8000b62:	b2a4      	uxth	r4, r4
 8000b64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b68:	fb07 1110 	mls	r1, r7, r0, r1
 8000b6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b70:	fb0e fe00 	mul.w	lr, lr, r0
 8000b74:	45a6      	cmp	lr, r4
 8000b76:	d908      	bls.n	8000b8a <__udivmoddi4+0x156>
 8000b78:	eb1c 0404 	adds.w	r4, ip, r4
 8000b7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b80:	d202      	bcs.n	8000b88 <__udivmoddi4+0x154>
 8000b82:	45a6      	cmp	lr, r4
 8000b84:	f200 80bb 	bhi.w	8000cfe <__udivmoddi4+0x2ca>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	eba4 040e 	sub.w	r4, r4, lr
 8000b8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b92:	e79c      	b.n	8000ace <__udivmoddi4+0x9a>
 8000b94:	f1c6 0720 	rsb	r7, r6, #32
 8000b98:	40b3      	lsls	r3, r6
 8000b9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ba2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ba6:	fa01 f306 	lsl.w	r3, r1, r6
 8000baa:	431c      	orrs	r4, r3
 8000bac:	40f9      	lsrs	r1, r7
 8000bae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bba:	0c20      	lsrs	r0, r4, #16
 8000bbc:	fa1f fe8c 	uxth.w	lr, ip
 8000bc0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bc4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bc8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd2:	d90b      	bls.n	8000bec <__udivmoddi4+0x1b8>
 8000bd4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bd8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bdc:	f080 8088 	bcs.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be0:	4288      	cmp	r0, r1
 8000be2:	f240 8085 	bls.w	8000cf0 <__udivmoddi4+0x2bc>
 8000be6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bea:	4461      	add	r1, ip
 8000bec:	1a09      	subs	r1, r1, r0
 8000bee:	b2a4      	uxth	r4, r4
 8000bf0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bf4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bf8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bfc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c00:	458e      	cmp	lr, r1
 8000c02:	d908      	bls.n	8000c16 <__udivmoddi4+0x1e2>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c0c:	d26c      	bcs.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c0e:	458e      	cmp	lr, r1
 8000c10:	d96a      	bls.n	8000ce8 <__udivmoddi4+0x2b4>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4461      	add	r1, ip
 8000c16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c1e:	eba1 010e 	sub.w	r1, r1, lr
 8000c22:	42a1      	cmp	r1, r4
 8000c24:	46c8      	mov	r8, r9
 8000c26:	46a6      	mov	lr, r4
 8000c28:	d356      	bcc.n	8000cd8 <__udivmoddi4+0x2a4>
 8000c2a:	d053      	beq.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x212>
 8000c2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c32:	eb61 010e 	sbc.w	r1, r1, lr
 8000c36:	fa01 f707 	lsl.w	r7, r1, r7
 8000c3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c3e:	40f1      	lsrs	r1, r6
 8000c40:	431f      	orrs	r7, r3
 8000c42:	e9c5 7100 	strd	r7, r1, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	f1c2 0320 	rsb	r3, r2, #32
 8000c52:	40d8      	lsrs	r0, r3
 8000c54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c58:	fa21 f303 	lsr.w	r3, r1, r3
 8000c5c:	4091      	lsls	r1, r2
 8000c5e:	4301      	orrs	r1, r0
 8000c60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c70:	0c0b      	lsrs	r3, r1, #16
 8000c72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c76:	fb00 f60e 	mul.w	r6, r0, lr
 8000c7a:	429e      	cmp	r6, r3
 8000c7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0x260>
 8000c82:	eb1c 0303 	adds.w	r3, ip, r3
 8000c86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c8a:	d22f      	bcs.n	8000cec <__udivmoddi4+0x2b8>
 8000c8c:	429e      	cmp	r6, r3
 8000c8e:	d92d      	bls.n	8000cec <__udivmoddi4+0x2b8>
 8000c90:	3802      	subs	r0, #2
 8000c92:	4463      	add	r3, ip
 8000c94:	1b9b      	subs	r3, r3, r6
 8000c96:	b289      	uxth	r1, r1
 8000c98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000ca0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ca4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ca8:	428b      	cmp	r3, r1
 8000caa:	d908      	bls.n	8000cbe <__udivmoddi4+0x28a>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cb4:	d216      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cb6:	428b      	cmp	r3, r1
 8000cb8:	d914      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000cba:	3e02      	subs	r6, #2
 8000cbc:	4461      	add	r1, ip
 8000cbe:	1ac9      	subs	r1, r1, r3
 8000cc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cc4:	e738      	b.n	8000b38 <__udivmoddi4+0x104>
 8000cc6:	462e      	mov	r6, r5
 8000cc8:	4628      	mov	r0, r5
 8000cca:	e705      	b.n	8000ad8 <__udivmoddi4+0xa4>
 8000ccc:	4606      	mov	r6, r0
 8000cce:	e6e3      	b.n	8000a98 <__udivmoddi4+0x64>
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	e6f8      	b.n	8000ac6 <__udivmoddi4+0x92>
 8000cd4:	454b      	cmp	r3, r9
 8000cd6:	d2a9      	bcs.n	8000c2c <__udivmoddi4+0x1f8>
 8000cd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ce0:	3801      	subs	r0, #1
 8000ce2:	e7a3      	b.n	8000c2c <__udivmoddi4+0x1f8>
 8000ce4:	4646      	mov	r6, r8
 8000ce6:	e7ea      	b.n	8000cbe <__udivmoddi4+0x28a>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	e794      	b.n	8000c16 <__udivmoddi4+0x1e2>
 8000cec:	4640      	mov	r0, r8
 8000cee:	e7d1      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cf0:	46d0      	mov	r8, sl
 8000cf2:	e77b      	b.n	8000bec <__udivmoddi4+0x1b8>
 8000cf4:	3b02      	subs	r3, #2
 8000cf6:	4461      	add	r1, ip
 8000cf8:	e732      	b.n	8000b60 <__udivmoddi4+0x12c>
 8000cfa:	4630      	mov	r0, r6
 8000cfc:	e709      	b.n	8000b12 <__udivmoddi4+0xde>
 8000cfe:	4464      	add	r4, ip
 8000d00:	3802      	subs	r0, #2
 8000d02:	e742      	b.n	8000b8a <__udivmoddi4+0x156>

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d0c:	f001 f89a 	bl	8001e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d10:	f000 f86a 	bl	8000de8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d14:	f000 fa56 	bl	80011c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d18:	f000 fa2c 	bl	8001174 <MX_DMA_Init>
  MX_TIM1_Init();
 8000d1c:	f000 f8ce 	bl	8000ebc <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d20:	f000 f9b0 	bl	8001084 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000d24:	f000 f95a 	bl	8000fdc <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000d28:	f000 f9fa 	bl	8001120 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000d2c:	213c      	movs	r1, #60	; 0x3c
 8000d2e:	4821      	ldr	r0, [pc, #132]	; (8000db4 <main+0xac>)
 8000d30:	f002 feb4 	bl	8003a9c <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000d34:	4820      	ldr	r0, [pc, #128]	; (8000db8 <main+0xb0>)
 8000d36:	f002 fc83 	bl	8003640 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8000d3a:	2108      	movs	r1, #8
 8000d3c:	481f      	ldr	r0, [pc, #124]	; (8000dbc <main+0xb4>)
 8000d3e:	f002 fd3f 	bl	80037c0 <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, &data_rx, 1);   // 57600!
 8000d42:	2201      	movs	r2, #1
 8000d44:	491e      	ldr	r1, [pc, #120]	; (8000dc0 <main+0xb8>)
 8000d46:	481f      	ldr	r0, [pc, #124]	; (8000dc4 <main+0xbc>)
 8000d48:	f003 fe2f 	bl	80049aa <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  data_check = true;
 8000d4c:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <main+0xc0>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	701a      	strb	r2, [r3, #0]
	  if (uart_flag == true)
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <main+0xc4>)
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d0f8      	beq.n	8000d4c <main+0x44>
	      {
	        memset(data_after_cut, 0, sizeof(data_after_cut));
 8000d5a:	220d      	movs	r2, #13
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <main+0xc8>)
 8000d60:	f005 fb14 	bl	800638c <memset>
	        memcpy(uart_handle.au8RxBuffer, (uint8_t *)data_uart, uart_count);
 8000d64:	4b1b      	ldr	r3, [pc, #108]	; (8000dd4 <main+0xcc>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	491b      	ldr	r1, [pc, #108]	; (8000dd8 <main+0xd0>)
 8000d6c:	481b      	ldr	r0, [pc, #108]	; (8000ddc <main+0xd4>)
 8000d6e:	f005 faff 	bl	8006370 <memcpy>
	        check_status = UART_get_data(uart_handle.au8RxBuffer, uart_count, data_after_cut, &get_data_lenght); // After this function data_after_cut will contain the data bytes of Kp Ki Kd                                                                                                           //     char message[] = {0};
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <main+0xcc>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	b299      	uxth	r1, r3
 8000d78:	4b19      	ldr	r3, [pc, #100]	; (8000de0 <main+0xd8>)
 8000d7a:	4a15      	ldr	r2, [pc, #84]	; (8000dd0 <main+0xc8>)
 8000d7c:	4817      	ldr	r0, [pc, #92]	; (8000ddc <main+0xd4>)
 8000d7e:	f005 f98b 	bl	8006098 <UART_get_data>
 8000d82:	4603      	mov	r3, r0
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <main+0xdc>)
 8000d88:	701a      	strb	r2, [r3, #0]
	        if (check_status == no_valid || check_status == false_CRC ||
	        	check_status == buffer_small || check_status == false_lenght_data)
	        {
	          data_check = false;
	        }
	        if (data_check == true)
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <main+0xc0>)
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <main+0x8e>
	        {
	        	condition_of_flag();
 8000d92:	f000 fcf1 	bl	8001778 <condition_of_flag>
	        }
	        memset(data_uart, 0, uart_count);
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <main+0xcc>)
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	480e      	ldr	r0, [pc, #56]	; (8000dd8 <main+0xd0>)
 8000da0:	f005 faf4 	bl	800638c <memset>
	        uart_flag = false;
 8000da4:	4b09      	ldr	r3, [pc, #36]	; (8000dcc <main+0xc4>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	701a      	strb	r2, [r3, #0]
	        uart_count = 0;
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <main+0xcc>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	701a      	strb	r2, [r3, #0]
	  data_check = true;
 8000db0:	e7cc      	b.n	8000d4c <main+0x44>
 8000db2:	bf00      	nop
 8000db4:	200000d8 	.word	0x200000d8
 8000db8:	20000120 	.word	0x20000120
 8000dbc:	20000090 	.word	0x20000090
 8000dc0:	200002a7 	.word	0x200002a7
 8000dc4:	20000168 	.word	0x20000168
 8000dc8:	20000001 	.word	0x20000001
 8000dcc:	200002ef 	.word	0x200002ef
 8000dd0:	200002dc 	.word	0x200002dc
 8000dd4:	200002e9 	.word	0x200002e9
 8000dd8:	200002a8 	.word	0x200002a8
 8000ddc:	20000302 	.word	0x20000302
 8000de0:	200002ec 	.word	0x200002ec
 8000de4:	200002a6 	.word	0x200002a6

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b094      	sub	sp, #80	; 0x50
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0320 	add.w	r3, r7, #32
 8000df2:	2230      	movs	r2, #48	; 0x30
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f005 fac8 	bl	800638c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	f107 030c 	add.w	r3, r7, #12
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e14:	4a27      	ldr	r2, [pc, #156]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e1c:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <SystemClock_Config+0xcc>)
 8000e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e24:	60bb      	str	r3, [r7, #8]
 8000e26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	607b      	str	r3, [r7, #4]
 8000e2c:	4b22      	ldr	r3, [pc, #136]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a21      	ldr	r2, [pc, #132]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b1f      	ldr	r3, [pc, #124]	; (8000eb8 <SystemClock_Config+0xd0>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e44:	2302      	movs	r3, #2
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e4c:	2310      	movs	r3, #16
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e50:	2302      	movs	r3, #2
 8000e52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000e5c:	23a8      	movs	r3, #168	; 0xa8
 8000e5e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e60:	2302      	movs	r3, #2
 8000e62:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e64:	2304      	movs	r3, #4
 8000e66:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f001 ff3f 	bl	8002cf0 <HAL_RCC_OscConfig>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e78:	f000 fd66 	bl	8001948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e88:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e8c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e94:	f107 030c 	add.w	r3, r7, #12
 8000e98:	2105      	movs	r1, #5
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 f9a0 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ea6:	f000 fd4f 	bl	8001948 <Error_Handler>
  }
}
 8000eaa:	bf00      	nop
 8000eac:	3750      	adds	r7, #80	; 0x50
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40023800 	.word	0x40023800
 8000eb8:	40007000 	.word	0x40007000

08000ebc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b092      	sub	sp, #72	; 0x48
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]
 8000ed4:	605a      	str	r2, [r3, #4]
 8000ed6:	609a      	str	r2, [r3, #8]
 8000ed8:	60da      	str	r2, [r3, #12]
 8000eda:	611a      	str	r2, [r3, #16]
 8000edc:	615a      	str	r2, [r3, #20]
 8000ede:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2220      	movs	r2, #32
 8000ee4:	2100      	movs	r1, #0
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f005 fa50 	bl	800638c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000eee:	4a3a      	ldr	r2, [pc, #232]	; (8000fd8 <MX_TIM1_Init+0x11c>)
 8000ef0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 999;
 8000ef2:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efa:	4b36      	ldr	r3, [pc, #216]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1679;
 8000f00:	4b34      	ldr	r3, [pc, #208]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f02:	f240 628f 	movw	r2, #1679	; 0x68f
 8000f06:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f08:	4b32      	ldr	r3, [pc, #200]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000f0e:	4b31      	ldr	r3, [pc, #196]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f14:	4b2f      	ldr	r3, [pc, #188]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000f1a:	482e      	ldr	r0, [pc, #184]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f1c:	f002 fc00 	bl	8003720 <HAL_TIM_PWM_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000f26:	f000 fd0f 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000f32:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f36:	4619      	mov	r1, r3
 8000f38:	4826      	ldr	r0, [pc, #152]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f3a:	f003 fc07 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000f44:	f000 fd00 	bl	8001948 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	2360      	movs	r3, #96	; 0x60
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000f54:	2300      	movs	r3, #0
 8000f56:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f68:	2208      	movs	r2, #8
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4819      	ldr	r0, [pc, #100]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f6e:	f002 ff2b 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000f78:	f000 fce6 	bl	8001948 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f80:	220c      	movs	r2, #12
 8000f82:	4619      	mov	r1, r3
 8000f84:	4813      	ldr	r0, [pc, #76]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000f86:	f002 ff1f 	bl	8003dc8 <HAL_TIM_PWM_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000f90:	f000 fcda 	bl	8001948 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fac:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4807      	ldr	r0, [pc, #28]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000fb8:	f003 fc44 	bl	8004844 <HAL_TIMEx_ConfigBreakDeadTime>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_TIM1_Init+0x10a>
  {
    Error_Handler();
 8000fc2:	f000 fcc1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <MX_TIM1_Init+0x118>)
 8000fc8:	f000 fd7c 	bl	8001ac4 <HAL_TIM_MspPostInit>

}
 8000fcc:	bf00      	nop
 8000fce:	3748      	adds	r7, #72	; 0x48
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	20000090 	.word	0x20000090
 8000fd8:	40010000 	.word	0x40010000

08000fdc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000fe2:	f107 030c 	add.w	r3, r7, #12
 8000fe6:	2224      	movs	r2, #36	; 0x24
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f005 f9ce 	bl	800638c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ff8:	4b21      	ldr	r3, [pc, #132]	; (8001080 <MX_TIM2_Init+0xa4>)
 8000ffa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ffe:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001000:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b1e      	ldr	r3, [pc, #120]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800100c:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_TIM2_Init+0xa4>)
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_TIM2_Init+0xa4>)
 800101c:	2200      	movs	r2, #0
 800101e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001020:	2303      	movs	r3, #3
 8001022:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001024:	2300      	movs	r3, #0
 8001026:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001028:	2301      	movs	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800102c:	2300      	movs	r3, #0
 800102e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001034:	2300      	movs	r3, #0
 8001036:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001038:	2301      	movs	r3, #1
 800103a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800103c:	2300      	movs	r3, #0
 800103e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4619      	mov	r1, r3
 800104a:	480d      	ldr	r0, [pc, #52]	; (8001080 <MX_TIM2_Init+0xa4>)
 800104c:	f002 fc80 	bl	8003950 <HAL_TIM_Encoder_Init>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001056:	f000 fc77 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	4619      	mov	r1, r3
 8001066:	4806      	ldr	r0, [pc, #24]	; (8001080 <MX_TIM2_Init+0xa4>)
 8001068:	f003 fb70 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001072:	f000 fc69 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001076:	bf00      	nop
 8001078:	3730      	adds	r7, #48	; 0x30
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	200000d8 	.word	0x200000d8

08001084 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	605a      	str	r2, [r3, #4]
 8001094:	609a      	str	r2, [r3, #8]
 8001096:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001098:	463b      	mov	r3, r7
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010a0:	4b1d      	ldr	r3, [pc, #116]	; (8001118 <MX_TIM3_Init+0x94>)
 80010a2:	4a1e      	ldr	r2, [pc, #120]	; (800111c <MX_TIM3_Init+0x98>)
 80010a4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 80010a6:	4b1c      	ldr	r3, [pc, #112]	; (8001118 <MX_TIM3_Init+0x94>)
 80010a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ae:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <MX_TIM3_Init+0x94>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1679;
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_TIM3_Init+0x94>)
 80010b6:	f240 628f 	movw	r2, #1679	; 0x68f
 80010ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <MX_TIM3_Init+0x94>)
 80010be:	2200      	movs	r2, #0
 80010c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010c2:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_TIM3_Init+0x94>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010c8:	4813      	ldr	r0, [pc, #76]	; (8001118 <MX_TIM3_Init+0x94>)
 80010ca:	f002 fa69 	bl	80035a0 <HAL_TIM_Base_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80010d4:	f000 fc38 	bl	8001948 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010de:	f107 0308 	add.w	r3, r7, #8
 80010e2:	4619      	mov	r1, r3
 80010e4:	480c      	ldr	r0, [pc, #48]	; (8001118 <MX_TIM3_Init+0x94>)
 80010e6:	f002 ff31 	bl	8003f4c <HAL_TIM_ConfigClockSource>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d001      	beq.n	80010f4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80010f0:	f000 fc2a 	bl	8001948 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010f4:	2300      	movs	r3, #0
 80010f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80010fc:	463b      	mov	r3, r7
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	; (8001118 <MX_TIM3_Init+0x94>)
 8001102:	f003 fb23 	bl	800474c <HAL_TIMEx_MasterConfigSynchronization>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800110c:	f000 fc1c 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000120 	.word	0x20000120
 800111c:	40000400 	.word	0x40000400

08001120 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001124:	4b11      	ldr	r3, [pc, #68]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001126:	4a12      	ldr	r2, [pc, #72]	; (8001170 <MX_USART2_UART_Init+0x50>)
 8001128:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800112c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8001130:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001134:	2200      	movs	r2, #0
 8001136:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800113a:	2200      	movs	r2, #0
 800113c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001140:	2200      	movs	r2, #0
 8001142:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001146:	220c      	movs	r2, #12
 8001148:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USART2_UART_Init+0x4c>)
 800114c:	2200      	movs	r2, #0
 800114e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USART2_UART_Init+0x4c>)
 8001158:	f003 fbda 	bl	8004910 <HAL_UART_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001162:	f000 fbf1 	bl	8001948 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000168 	.word	0x20000168
 8001170:	40004400 	.word	0x40004400

08001174 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	607b      	str	r3, [r7, #4]
 800117e:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <MX_DMA_Init+0x4c>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a0f      	ldr	r2, [pc, #60]	; (80011c0 <MX_DMA_Init+0x4c>)
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <MX_DMA_Init+0x4c>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001192:	607b      	str	r3, [r7, #4]
 8001194:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2100      	movs	r1, #0
 800119a:	2010      	movs	r0, #16
 800119c:	f000 ffb5 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80011a0:	2010      	movs	r0, #16
 80011a2:	f000 ffce 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80011a6:	2200      	movs	r2, #0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2011      	movs	r0, #17
 80011ac:	f000 ffad 	bl	800210a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80011b0:	2011      	movs	r0, #17
 80011b2:	f000 ffc6 	bl	8002142 <HAL_NVIC_EnableIRQ>

}
 80011b6:	bf00      	nop
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	40023800 	.word	0x40023800

080011c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08a      	sub	sp, #40	; 0x28
 80011c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ca:	f107 0314 	add.w	r3, r7, #20
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
 80011d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
 80011de:	4b27      	ldr	r3, [pc, #156]	; (800127c <MX_GPIO_Init+0xb8>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a26      	ldr	r2, [pc, #152]	; (800127c <MX_GPIO_Init+0xb8>)
 80011e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b24      	ldr	r3, [pc, #144]	; (800127c <MX_GPIO_Init+0xb8>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011f2:	613b      	str	r3, [r7, #16]
 80011f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	60fb      	str	r3, [r7, #12]
 80011fa:	4b20      	ldr	r3, [pc, #128]	; (800127c <MX_GPIO_Init+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fe:	4a1f      	ldr	r2, [pc, #124]	; (800127c <MX_GPIO_Init+0xb8>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6313      	str	r3, [r2, #48]	; 0x30
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_GPIO_Init+0xb8>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60bb      	str	r3, [r7, #8]
 8001216:	4b19      	ldr	r3, [pc, #100]	; (800127c <MX_GPIO_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	4a18      	ldr	r2, [pc, #96]	; (800127c <MX_GPIO_Init+0xb8>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6313      	str	r3, [r2, #48]	; 0x30
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_GPIO_Init+0xb8>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
 8001232:	4b12      	ldr	r3, [pc, #72]	; (800127c <MX_GPIO_Init+0xb8>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a11      	ldr	r2, [pc, #68]	; (800127c <MX_GPIO_Init+0xb8>)
 8001238:	f043 0304 	orr.w	r3, r3, #4
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <MX_GPIO_Init+0xb8>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0304 	and.w	r3, r3, #4
 8001246:	607b      	str	r3, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, IN1_Pin|IN2_Pin, GPIO_PIN_RESET);
 800124a:	2200      	movs	r2, #0
 800124c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001250:	480b      	ldr	r0, [pc, #44]	; (8001280 <MX_GPIO_Init+0xbc>)
 8001252:	f001 fd33 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : IN1_Pin IN2_Pin */
  GPIO_InitStruct.Pin = IN1_Pin|IN2_Pin;
 8001256:	f44f 7340 	mov.w	r3, #768	; 0x300
 800125a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125c:	2301      	movs	r3, #1
 800125e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001264:	2300      	movs	r3, #0
 8001266:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4619      	mov	r1, r3
 800126e:	4804      	ldr	r0, [pc, #16]	; (8001280 <MX_GPIO_Init+0xbc>)
 8001270:	f001 fb88 	bl	8002984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001274:	bf00      	nop
 8001276:	3728      	adds	r7, #40	; 0x28
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	40023800 	.word	0x40023800
 8001280:	40020800 	.word	0x40020800

08001284 <tune_PID_after1>:

/* USER CODE BEGIN 4 */
void tune_PID_after1(Select_Tune select)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	71fb      	strb	r3, [r7, #7]
  switch (select)
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d025      	beq.n	80012e0 <tune_PID_after1+0x5c>
 8001294:	2b01      	cmp	r3, #1
 8001296:	d147      	bne.n	8001328 <tune_PID_after1+0xa4>
  {
  case Select_Posi:
    control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001298:	4b26      	ldr	r3, [pc, #152]	; (8001334 <tune_PID_after1+0xb0>)
 800129a:	edd3 7a00 	vldr	s15, [r3]
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <tune_PID_after1+0xb4>)
 80012a0:	ed93 7a00 	vldr	s14, [r3]
 80012a4:	4b25      	ldr	r3, [pc, #148]	; (800133c <tune_PID_after1+0xb8>)
 80012a6:	edd3 6a00 	vldr	s13, [r3]
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <tune_PID_after1+0xbc>)
 80012ac:	ed93 6a00 	vldr	s12, [r3]
 80012b0:	eef0 1a46 	vmov.f32	s3, s12
 80012b4:	eeb0 1a66 	vmov.f32	s2, s13
 80012b8:	eef0 0a47 	vmov.f32	s1, s14
 80012bc:	eeb0 0a67 	vmov.f32	s0, s15
 80012c0:	4820      	ldr	r0, [pc, #128]	; (8001344 <tune_PID_after1+0xc0>)
 80012c2:	f004 fbf5 	bl	8005ab0 <control_PID_Position>
    output_pid = output_pid_posi;
 80012c6:	4b20      	ldr	r3, [pc, #128]	; (8001348 <tune_PID_after1+0xc4>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a20      	ldr	r2, [pc, #128]	; (800134c <tune_PID_after1+0xc8>)
 80012cc:	6013      	str	r3, [r2, #0]
    PWM_control_position(&htim1, output_pid);
 80012ce:	4b1f      	ldr	r3, [pc, #124]	; (800134c <tune_PID_after1+0xc8>)
 80012d0:	edd3 7a00 	vldr	s15, [r3]
 80012d4:	eeb0 0a67 	vmov.f32	s0, s15
 80012d8:	481d      	ldr	r0, [pc, #116]	; (8001350 <tune_PID_after1+0xcc>)
 80012da:	f004 fe13 	bl	8005f04 <PWM_control_position>
    break;
 80012de:	e024      	b.n	800132a <tune_PID_after1+0xa6>
  case Select_Velo:
    control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <tune_PID_after1+0xb0>)
 80012e2:	edd3 7a00 	vldr	s15, [r3]
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <tune_PID_after1+0xb4>)
 80012e8:	ed93 7a00 	vldr	s14, [r3]
 80012ec:	4b13      	ldr	r3, [pc, #76]	; (800133c <tune_PID_after1+0xb8>)
 80012ee:	edd3 6a00 	vldr	s13, [r3]
 80012f2:	4b13      	ldr	r3, [pc, #76]	; (8001340 <tune_PID_after1+0xbc>)
 80012f4:	ed93 6a00 	vldr	s12, [r3]
 80012f8:	eef0 1a46 	vmov.f32	s3, s12
 80012fc:	eeb0 1a66 	vmov.f32	s2, s13
 8001300:	eef0 0a47 	vmov.f32	s1, s14
 8001304:	eeb0 0a67 	vmov.f32	s0, s15
 8001308:	480e      	ldr	r0, [pc, #56]	; (8001344 <tune_PID_after1+0xc0>)
 800130a:	f004 fcb1 	bl	8005c70 <control_PID_Velocity>
    output_pid = output_pid_velo;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <tune_PID_after1+0xd0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a0e      	ldr	r2, [pc, #56]	; (800134c <tune_PID_after1+0xc8>)
 8001314:	6013      	str	r3, [r2, #0]
    PWM_control_velocity(&htim1, output_pid);
 8001316:	4b0d      	ldr	r3, [pc, #52]	; (800134c <tune_PID_after1+0xc8>)
 8001318:	edd3 7a00 	vldr	s15, [r3]
 800131c:	eeb0 0a67 	vmov.f32	s0, s15
 8001320:	480b      	ldr	r0, [pc, #44]	; (8001350 <tune_PID_after1+0xcc>)
 8001322:	f004 fd7d 	bl	8005e20 <PWM_control_velocity>
    break;
 8001326:	e000      	b.n	800132a <tune_PID_after1+0xa6>
  default:
    break;
 8001328:	bf00      	nop
  }
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	200002a0 	.word	0x200002a0
 8001338:	20000294 	.word	0x20000294
 800133c:	20000298 	.word	0x20000298
 8001340:	2000029c 	.word	0x2000029c
 8001344:	20000330 	.word	0x20000330
 8001348:	20000274 	.word	0x20000274
 800134c:	2000026c 	.word	0x2000026c
 8001350:	20000090 	.word	0x20000090
 8001354:	20000270 	.word	0x20000270

08001358 <tune_PID_after2>:

void tune_PID_after2(Select_Tune select)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
  switch (select)
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	2b00      	cmp	r3, #0
 8001366:	f000 80af 	beq.w	80014c8 <tune_PID_after2+0x170>
 800136a:	2b01      	cmp	r3, #1
 800136c:	f040 80d0 	bne.w	8001510 <tune_PID_after2+0x1b8>
  {
  case Select_Posi:
    if (count_PID_position_first_time == true)
 8001370:	4b6a      	ldr	r3, [pc, #424]	; (800151c <tune_PID_after2+0x1c4>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d03d      	beq.n	80013f4 <tune_PID_after2+0x9c>
    {
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // in degrees, calculated at the first time the engine has been run only once
 8001378:	4b69      	ldr	r3, [pc, #420]	; (8001520 <tune_PID_after2+0x1c8>)
 800137a:	edd3 7a00 	vldr	s15, [r3]
 800137e:	4b69      	ldr	r3, [pc, #420]	; (8001524 <tune_PID_after2+0x1cc>)
 8001380:	ed93 7a00 	vldr	s14, [r3]
 8001384:	4b68      	ldr	r3, [pc, #416]	; (8001528 <tune_PID_after2+0x1d0>)
 8001386:	edd3 6a00 	vldr	s13, [r3]
 800138a:	4b68      	ldr	r3, [pc, #416]	; (800152c <tune_PID_after2+0x1d4>)
 800138c:	ed93 6a00 	vldr	s12, [r3]
 8001390:	eef0 1a46 	vmov.f32	s3, s12
 8001394:	eeb0 1a66 	vmov.f32	s2, s13
 8001398:	eef0 0a47 	vmov.f32	s1, s14
 800139c:	eeb0 0a67 	vmov.f32	s0, s15
 80013a0:	4863      	ldr	r0, [pc, #396]	; (8001530 <tune_PID_after2+0x1d8>)
 80013a2:	f004 fb85 	bl	8005ab0 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint speed equal output position
 80013a6:	4b63      	ldr	r3, [pc, #396]	; (8001534 <tune_PID_after2+0x1dc>)
 80013a8:	edd3 7a00 	vldr	s15, [r3]
 80013ac:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <tune_PID_after2+0x1cc>)
 80013ae:	ed93 7a00 	vldr	s14, [r3]
 80013b2:	4b5d      	ldr	r3, [pc, #372]	; (8001528 <tune_PID_after2+0x1d0>)
 80013b4:	edd3 6a00 	vldr	s13, [r3]
 80013b8:	4b5c      	ldr	r3, [pc, #368]	; (800152c <tune_PID_after2+0x1d4>)
 80013ba:	ed93 6a00 	vldr	s12, [r3]
 80013be:	eef0 1a46 	vmov.f32	s3, s12
 80013c2:	eeb0 1a66 	vmov.f32	s2, s13
 80013c6:	eef0 0a47 	vmov.f32	s1, s14
 80013ca:	eeb0 0a67 	vmov.f32	s0, s15
 80013ce:	4858      	ldr	r0, [pc, #352]	; (8001530 <tune_PID_after2+0x1d8>)
 80013d0:	f004 fc4e 	bl	8005c70 <control_PID_Velocity>
      output_pid = output_pid_velo;
 80013d4:	4b58      	ldr	r3, [pc, #352]	; (8001538 <tune_PID_after2+0x1e0>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a58      	ldr	r2, [pc, #352]	; (800153c <tune_PID_after2+0x1e4>)
 80013da:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 80013dc:	4b57      	ldr	r3, [pc, #348]	; (800153c <tune_PID_after2+0x1e4>)
 80013de:	edd3 7a00 	vldr	s15, [r3]
 80013e2:	eeb0 0a67 	vmov.f32	s0, s15
 80013e6:	4856      	ldr	r0, [pc, #344]	; (8001540 <tune_PID_after2+0x1e8>)
 80013e8:	f004 fd8c 	bl	8005f04 <PWM_control_position>
      count_PID_position_first_time = false;
 80013ec:	4b4b      	ldr	r3, [pc, #300]	; (800151c <tune_PID_after2+0x1c4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
      break;
 80013f2:	e08e      	b.n	8001512 <tune_PID_after2+0x1ba>
    }
    if (count_PID == 3) // 3 times speed PID -> 1 time position PID
 80013f4:	4b53      	ldr	r3, [pc, #332]	; (8001544 <tune_PID_after2+0x1ec>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d13d      	bne.n	8001478 <tune_PID_after2+0x120>
    {
      control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);      // recalculate new output_pid_posi
 80013fc:	4b48      	ldr	r3, [pc, #288]	; (8001520 <tune_PID_after2+0x1c8>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	4b48      	ldr	r3, [pc, #288]	; (8001524 <tune_PID_after2+0x1cc>)
 8001404:	ed93 7a00 	vldr	s14, [r3]
 8001408:	4b47      	ldr	r3, [pc, #284]	; (8001528 <tune_PID_after2+0x1d0>)
 800140a:	edd3 6a00 	vldr	s13, [r3]
 800140e:	4b47      	ldr	r3, [pc, #284]	; (800152c <tune_PID_after2+0x1d4>)
 8001410:	ed93 6a00 	vldr	s12, [r3]
 8001414:	eef0 1a46 	vmov.f32	s3, s12
 8001418:	eeb0 1a66 	vmov.f32	s2, s13
 800141c:	eef0 0a47 	vmov.f32	s1, s14
 8001420:	eeb0 0a67 	vmov.f32	s0, s15
 8001424:	4842      	ldr	r0, [pc, #264]	; (8001530 <tune_PID_after2+0x1d8>)
 8001426:	f004 fb43 	bl	8005ab0 <control_PID_Position>
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint speed equal output position
 800142a:	4b42      	ldr	r3, [pc, #264]	; (8001534 <tune_PID_after2+0x1dc>)
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	4b3c      	ldr	r3, [pc, #240]	; (8001524 <tune_PID_after2+0x1cc>)
 8001432:	ed93 7a00 	vldr	s14, [r3]
 8001436:	4b3c      	ldr	r3, [pc, #240]	; (8001528 <tune_PID_after2+0x1d0>)
 8001438:	edd3 6a00 	vldr	s13, [r3]
 800143c:	4b3b      	ldr	r3, [pc, #236]	; (800152c <tune_PID_after2+0x1d4>)
 800143e:	ed93 6a00 	vldr	s12, [r3]
 8001442:	eef0 1a46 	vmov.f32	s3, s12
 8001446:	eeb0 1a66 	vmov.f32	s2, s13
 800144a:	eef0 0a47 	vmov.f32	s1, s14
 800144e:	eeb0 0a67 	vmov.f32	s0, s15
 8001452:	4837      	ldr	r0, [pc, #220]	; (8001530 <tune_PID_after2+0x1d8>)
 8001454:	f004 fc0c 	bl	8005c70 <control_PID_Velocity>
      output_pid = output_pid_velo;
 8001458:	4b37      	ldr	r3, [pc, #220]	; (8001538 <tune_PID_after2+0x1e0>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a37      	ldr	r2, [pc, #220]	; (800153c <tune_PID_after2+0x1e4>)
 800145e:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 8001460:	4b36      	ldr	r3, [pc, #216]	; (800153c <tune_PID_after2+0x1e4>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	eeb0 0a67 	vmov.f32	s0, s15
 800146a:	4835      	ldr	r0, [pc, #212]	; (8001540 <tune_PID_after2+0x1e8>)
 800146c:	f004 fd4a 	bl	8005f04 <PWM_control_position>
      count_PID = 0;
 8001470:	4b34      	ldr	r3, [pc, #208]	; (8001544 <tune_PID_after2+0x1ec>)
 8001472:	2200      	movs	r2, #0
 8001474:	701a      	strb	r2, [r3, #0]
      break;
 8001476:	e04c      	b.n	8001512 <tune_PID_after2+0x1ba>
    }
    else if (count_PID != 3)
 8001478:	4b32      	ldr	r3, [pc, #200]	; (8001544 <tune_PID_after2+0x1ec>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b03      	cmp	r3, #3
 800147e:	d023      	beq.n	80014c8 <tune_PID_after2+0x170>
    {
      control_PID_Velocity(&PID_contr, output_pid_posi, Kp_true, Ki_true, Kd_true); // setpoint speed equal output position
 8001480:	4b2c      	ldr	r3, [pc, #176]	; (8001534 <tune_PID_after2+0x1dc>)
 8001482:	edd3 7a00 	vldr	s15, [r3]
 8001486:	4b27      	ldr	r3, [pc, #156]	; (8001524 <tune_PID_after2+0x1cc>)
 8001488:	ed93 7a00 	vldr	s14, [r3]
 800148c:	4b26      	ldr	r3, [pc, #152]	; (8001528 <tune_PID_after2+0x1d0>)
 800148e:	edd3 6a00 	vldr	s13, [r3]
 8001492:	4b26      	ldr	r3, [pc, #152]	; (800152c <tune_PID_after2+0x1d4>)
 8001494:	ed93 6a00 	vldr	s12, [r3]
 8001498:	eef0 1a46 	vmov.f32	s3, s12
 800149c:	eeb0 1a66 	vmov.f32	s2, s13
 80014a0:	eef0 0a47 	vmov.f32	s1, s14
 80014a4:	eeb0 0a67 	vmov.f32	s0, s15
 80014a8:	4821      	ldr	r0, [pc, #132]	; (8001530 <tune_PID_after2+0x1d8>)
 80014aa:	f004 fbe1 	bl	8005c70 <control_PID_Velocity>
      output_pid = output_pid_velo;
 80014ae:	4b22      	ldr	r3, [pc, #136]	; (8001538 <tune_PID_after2+0x1e0>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a22      	ldr	r2, [pc, #136]	; (800153c <tune_PID_after2+0x1e4>)
 80014b4:	6013      	str	r3, [r2, #0]
      PWM_control_position(&htim1, output_pid);
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <tune_PID_after2+0x1e4>)
 80014b8:	edd3 7a00 	vldr	s15, [r3]
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <tune_PID_after2+0x1e8>)
 80014c2:	f004 fd1f 	bl	8005f04 <PWM_control_position>
      break;
 80014c6:	e024      	b.n	8001512 <tune_PID_after2+0x1ba>
    }
  case Select_Velo:
    control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <tune_PID_after2+0x1c8>)
 80014ca:	edd3 7a00 	vldr	s15, [r3]
 80014ce:	4b15      	ldr	r3, [pc, #84]	; (8001524 <tune_PID_after2+0x1cc>)
 80014d0:	ed93 7a00 	vldr	s14, [r3]
 80014d4:	4b14      	ldr	r3, [pc, #80]	; (8001528 <tune_PID_after2+0x1d0>)
 80014d6:	edd3 6a00 	vldr	s13, [r3]
 80014da:	4b14      	ldr	r3, [pc, #80]	; (800152c <tune_PID_after2+0x1d4>)
 80014dc:	ed93 6a00 	vldr	s12, [r3]
 80014e0:	eef0 1a46 	vmov.f32	s3, s12
 80014e4:	eeb0 1a66 	vmov.f32	s2, s13
 80014e8:	eef0 0a47 	vmov.f32	s1, s14
 80014ec:	eeb0 0a67 	vmov.f32	s0, s15
 80014f0:	480f      	ldr	r0, [pc, #60]	; (8001530 <tune_PID_after2+0x1d8>)
 80014f2:	f004 fbbd 	bl	8005c70 <control_PID_Velocity>
    output_pid = output_pid_velo; // uniformity to output_pid for easy control
 80014f6:	4b10      	ldr	r3, [pc, #64]	; (8001538 <tune_PID_after2+0x1e0>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <tune_PID_after2+0x1e4>)
 80014fc:	6013      	str	r3, [r2, #0]
    PWM_control_velocity(&htim1, output_pid);
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <tune_PID_after2+0x1e4>)
 8001500:	edd3 7a00 	vldr	s15, [r3]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	480d      	ldr	r0, [pc, #52]	; (8001540 <tune_PID_after2+0x1e8>)
 800150a:	f004 fc89 	bl	8005e20 <PWM_control_velocity>
    break;
 800150e:	e000      	b.n	8001512 <tune_PID_after2+0x1ba>
  default:
    break;
 8001510:	bf00      	nop
  }
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000000 	.word	0x20000000
 8001520:	200002a0 	.word	0x200002a0
 8001524:	20000294 	.word	0x20000294
 8001528:	20000298 	.word	0x20000298
 800152c:	2000029c 	.word	0x2000029c
 8001530:	20000330 	.word	0x20000330
 8001534:	20000274 	.word	0x20000274
 8001538:	20000270 	.word	0x20000270
 800153c:	2000026c 	.word	0x2000026c
 8001540:	20000090 	.word	0x20000090
 8001544:	200002a5 	.word	0x200002a5

08001548 <send_data_to_Qt>:

void send_data_to_Qt()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
  if (checkModeFromQt == MODE_POSI && flag_motor == true)
 800154e:	4b34      	ldr	r3, [pc, #208]	; (8001620 <send_data_to_Qt+0xd8>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d12e      	bne.n	80015b4 <send_data_to_Qt+0x6c>
 8001556:	4b33      	ldr	r3, [pc, #204]	; (8001624 <send_data_to_Qt+0xdc>)
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d02a      	beq.n	80015b4 <send_data_to_Qt+0x6c>
  {
    char float_to_char[sizeof(float)];
    char mode = 0x66;
 800155e:	2366      	movs	r3, #102	; 0x66
 8001560:	72fb      	strb	r3, [r7, #11]
 8001562:	4b31      	ldr	r3, [pc, #196]	; (8001628 <send_data_to_Qt+0xe0>)
 8001564:	681b      	ldr	r3, [r3, #0]
    memcpy(float_to_char, &now_position, sizeof(float));
 8001566:	60fb      	str	r3, [r7, #12]
    uint8_t *array_data;
    array_data = (uint8_t *)malloc(5);
 8001568:	2005      	movs	r0, #5
 800156a:	f004 fef1 	bl	8006350 <malloc>
 800156e:	4603      	mov	r3, r0
 8001570:	61fb      	str	r3, [r7, #28]
    uint8_t index = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	76fb      	strb	r3, [r7, #27]
    memcpy(array_data + index, &mode, 1); // Mode 0x66, if 0x66 ->position
 8001576:	7efb      	ldrb	r3, [r7, #27]
 8001578:	69fa      	ldr	r2, [r7, #28]
 800157a:	4413      	add	r3, r2
 800157c:	7afa      	ldrb	r2, [r7, #11]
 800157e:	701a      	strb	r2, [r3, #0]
    index += 1;
 8001580:	7efb      	ldrb	r3, [r7, #27]
 8001582:	3301      	adds	r3, #1
 8001584:	76fb      	strb	r3, [r7, #27]
    memcpy(array_data + index, float_to_char, 4);
 8001586:	7efb      	ldrb	r3, [r7, #27]
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	68fa      	ldr	r2, [r7, #12]
 800158e:	601a      	str	r2, [r3, #0]

    UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_handle.au8TxBuffer, &frame_tx_lenght);
 8001590:	4b26      	ldr	r3, [pc, #152]	; (800162c <send_data_to_Qt+0xe4>)
 8001592:	4a27      	ldr	r2, [pc, #156]	; (8001630 <send_data_to_Qt+0xe8>)
 8001594:	2105      	movs	r1, #5
 8001596:	69f8      	ldr	r0, [r7, #28]
 8001598:	f004 fe32 	bl	8006200 <UART_frame_data>
    HAL_UART_Transmit_DMA(&huart2, uart_handle.au8TxBuffer, frame_tx_lenght);
 800159c:	4b23      	ldr	r3, [pc, #140]	; (800162c <send_data_to_Qt+0xe4>)
 800159e:	881b      	ldrh	r3, [r3, #0]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4923      	ldr	r1, [pc, #140]	; (8001630 <send_data_to_Qt+0xe8>)
 80015a4:	4823      	ldr	r0, [pc, #140]	; (8001634 <send_data_to_Qt+0xec>)
 80015a6:	f003 fa31 	bl	8004a0c <HAL_UART_Transmit_DMA>
    free(array_data);
 80015aa:	69f8      	ldr	r0, [r7, #28]
 80015ac:	f004 fed8 	bl	8006360 <free>
  {
 80015b0:	bf00      	nop
    memcpy(array_data + index, float_to_char, 4);
    UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_handle.au8TxBuffer, &frame_tx_lenght);
    HAL_UART_Transmit_DMA(&huart2, uart_handle.au8TxBuffer, frame_tx_lenght);
    free(array_data);
  }
}
 80015b2:	e030      	b.n	8001616 <send_data_to_Qt+0xce>
  else if (checkModeFromQt == MODE_VELO && flag_motor == true)
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <send_data_to_Qt+0xd8>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d12c      	bne.n	8001616 <send_data_to_Qt+0xce>
 80015bc:	4b19      	ldr	r3, [pc, #100]	; (8001624 <send_data_to_Qt+0xdc>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d028      	beq.n	8001616 <send_data_to_Qt+0xce>
    char mode = 0x77;
 80015c4:	2377      	movs	r3, #119	; 0x77
 80015c6:	70fb      	strb	r3, [r7, #3]
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <send_data_to_Qt+0xf0>)
 80015ca:	681b      	ldr	r3, [r3, #0]
    memcpy(float_to_char, &velocity_real, sizeof(float));
 80015cc:	607b      	str	r3, [r7, #4]
    array_data = (uint8_t *)malloc(5);
 80015ce:	2005      	movs	r0, #5
 80015d0:	f004 febe 	bl	8006350 <malloc>
 80015d4:	4603      	mov	r3, r0
 80015d6:	617b      	str	r3, [r7, #20]
    uint8_t index = 0;
 80015d8:	2300      	movs	r3, #0
 80015da:	74fb      	strb	r3, [r7, #19]
    memcpy(array_data + index, &mode, 1); // Mode 0x77, if 0x77 ->velocity
 80015dc:	7cfb      	ldrb	r3, [r7, #19]
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4413      	add	r3, r2
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	701a      	strb	r2, [r3, #0]
    index += 1;
 80015e6:	7cfb      	ldrb	r3, [r7, #19]
 80015e8:	3301      	adds	r3, #1
 80015ea:	74fb      	strb	r3, [r7, #19]
    memcpy(array_data + index, float_to_char, 4);
 80015ec:	7cfb      	ldrb	r3, [r7, #19]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	4413      	add	r3, r2
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	601a      	str	r2, [r3, #0]
    UART_frame_data(array_data, PROTO_DATA_SIZE_TX, uart_handle.au8TxBuffer, &frame_tx_lenght);
 80015f6:	4b0d      	ldr	r3, [pc, #52]	; (800162c <send_data_to_Qt+0xe4>)
 80015f8:	4a0d      	ldr	r2, [pc, #52]	; (8001630 <send_data_to_Qt+0xe8>)
 80015fa:	2105      	movs	r1, #5
 80015fc:	6978      	ldr	r0, [r7, #20]
 80015fe:	f004 fdff 	bl	8006200 <UART_frame_data>
    HAL_UART_Transmit_DMA(&huart2, uart_handle.au8TxBuffer, frame_tx_lenght);
 8001602:	4b0a      	ldr	r3, [pc, #40]	; (800162c <send_data_to_Qt+0xe4>)
 8001604:	881b      	ldrh	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4909      	ldr	r1, [pc, #36]	; (8001630 <send_data_to_Qt+0xe8>)
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <send_data_to_Qt+0xec>)
 800160c:	f003 f9fe 	bl	8004a0c <HAL_UART_Transmit_DMA>
    free(array_data);
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f004 fea5 	bl	8006360 <free>
}
 8001616:	bf00      	nop
 8001618:	3720      	adds	r7, #32
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	200002a4 	.word	0x200002a4
 8001624:	200002ee 	.word	0x200002ee
 8001628:	20000288 	.word	0x20000288
 800162c:	200002ea 	.word	0x200002ea
 8001630:	200002f4 	.word	0x200002f4
 8001634:	20000168 	.word	0x20000168
 8001638:	2000028c 	.word	0x2000028c

0800163c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d101      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    encoder();
 800164e:	f004 fceb 	bl	8006028 <encoder>
  }
  if (checkModeFromQt == MODE_POSI && flag_motor == true && choose_PID == Select_PID1)
 8001652:	4b26      	ldr	r3, [pc, #152]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d10b      	bne.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x36>
 800165a:	4b25      	ldr	r3, [pc, #148]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d007      	beq.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x36>
 8001662:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b02      	cmp	r3, #2
 8001668:	d103      	bne.n	8001672 <HAL_TIM_PeriodElapsedCallback+0x36>
  {
    tune_PID_after1(Select_Posi);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff fe0a 	bl	8001284 <tune_PID_after1>
 8001670:	e034      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
  }
  else if (checkModeFromQt == MODE_VELO && flag_motor == true && choose_PID == Select_PID1)
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d10b      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x56>
 800167a:	4b1d      	ldr	r3, [pc, #116]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d007      	beq.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x56>
 8001682:	4b1c      	ldr	r3, [pc, #112]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	2b02      	cmp	r3, #2
 8001688:	d103      	bne.n	8001692 <HAL_TIM_PeriodElapsedCallback+0x56>
  {
    tune_PID_after1(Select_Velo);
 800168a:	2000      	movs	r0, #0
 800168c:	f7ff fdfa 	bl	8001284 <tune_PID_after1>
 8001690:	e024      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
  }

  else if (checkModeFromQt == MODE_POSI && flag_motor == true && choose_PID == Select_PID2)
 8001692:	4b16      	ldr	r3, [pc, #88]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d111      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x82>
 800169a:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d00d      	beq.n	80016be <HAL_TIM_PeriodElapsedCallback+0x82>
 80016a2:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b03      	cmp	r3, #3
 80016a8:	d109      	bne.n	80016be <HAL_TIM_PeriodElapsedCallback+0x82>
  {
        count_PID++;
 80016aa:	4b13      	ldr	r3, [pc, #76]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	b2da      	uxtb	r2, r3
 80016b2:	4b11      	ldr	r3, [pc, #68]	; (80016f8 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80016b4:	701a      	strb	r2, [r3, #0]
    tune_PID_after2(Select_Posi);
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff fe4e 	bl	8001358 <tune_PID_after2>
 80016bc:	e00e      	b.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
  }
  else if (checkModeFromQt == MODE_VELO && flag_motor == true && choose_PID == Select_PID2)
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b02      	cmp	r3, #2
 80016c4:	d10a      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
 80016c6:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b03      	cmp	r3, #3
 80016d4:	d102      	bne.n	80016dc <HAL_TIM_PeriodElapsedCallback+0xa0>
  {
    tune_PID_after2(Select_Velo);
 80016d6:	2000      	movs	r0, #0
 80016d8:	f7ff fe3e 	bl	8001358 <tune_PID_after2>
  }
  send_data_to_Qt();
 80016dc:	f7ff ff34 	bl	8001548 <send_data_to_Qt>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40000400 	.word	0x40000400
 80016ec:	200002a4 	.word	0x200002a4
 80016f0:	200002ee 	.word	0x200002ee
 80016f4:	200002f0 	.word	0x200002f0
 80016f8:	200002a5 	.word	0x200002a5

080016fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_UART_RxCpltCallback+0x64>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d124      	bne.n	8001758 <HAL_UART_RxCpltCallback+0x5c>
  {
    if (data_rx == PROTO_END_BYTE)
 800170e:	4b15      	ldr	r3, [pc, #84]	; (8001764 <HAL_UART_RxCpltCallback+0x68>)
 8001710:	781b      	ldrb	r3, [r3, #0]
 8001712:	2b03      	cmp	r3, #3
 8001714:	d10e      	bne.n	8001734 <HAL_UART_RxCpltCallback+0x38>
    {
      data_uart[uart_count++] = data_rx;
 8001716:	4b14      	ldr	r3, [pc, #80]	; (8001768 <HAL_UART_RxCpltCallback+0x6c>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	1c5a      	adds	r2, r3, #1
 800171c:	b2d1      	uxtb	r1, r2
 800171e:	4a12      	ldr	r2, [pc, #72]	; (8001768 <HAL_UART_RxCpltCallback+0x6c>)
 8001720:	7011      	strb	r1, [r2, #0]
 8001722:	461a      	mov	r2, r3
 8001724:	4b0f      	ldr	r3, [pc, #60]	; (8001764 <HAL_UART_RxCpltCallback+0x68>)
 8001726:	7819      	ldrb	r1, [r3, #0]
 8001728:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_UART_RxCpltCallback+0x70>)
 800172a:	5499      	strb	r1, [r3, r2]
      uart_flag = true; // complete
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_UART_RxCpltCallback+0x74>)
 800172e:	2201      	movs	r2, #1
 8001730:	701a      	strb	r2, [r3, #0]
 8001732:	e00c      	b.n	800174e <HAL_UART_RxCpltCallback+0x52>
    }
    else
    {
      data_uart[uart_count] = data_rx;
 8001734:	4b0c      	ldr	r3, [pc, #48]	; (8001768 <HAL_UART_RxCpltCallback+0x6c>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_UART_RxCpltCallback+0x68>)
 800173c:	7819      	ldrb	r1, [r3, #0]
 800173e:	4b0b      	ldr	r3, [pc, #44]	; (800176c <HAL_UART_RxCpltCallback+0x70>)
 8001740:	5499      	strb	r1, [r3, r2]
      uart_count++;
 8001742:	4b09      	ldr	r3, [pc, #36]	; (8001768 <HAL_UART_RxCpltCallback+0x6c>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_UART_RxCpltCallback+0x6c>)
 800174c:	701a      	strb	r2, [r3, #0]
    }
    HAL_UART_Receive_IT(&huart2, (uint8_t *)&data_rx, 1);
 800174e:	2201      	movs	r2, #1
 8001750:	4904      	ldr	r1, [pc, #16]	; (8001764 <HAL_UART_RxCpltCallback+0x68>)
 8001752:	4808      	ldr	r0, [pc, #32]	; (8001774 <HAL_UART_RxCpltCallback+0x78>)
 8001754:	f003 f929 	bl	80049aa <HAL_UART_Receive_IT>
  }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	40004400 	.word	0x40004400
 8001764:	200002a7 	.word	0x200002a7
 8001768:	200002e9 	.word	0x200002e9
 800176c:	200002a8 	.word	0x200002a8
 8001770:	200002ef 	.word	0x200002ef
 8001774:	20000168 	.word	0x20000168

08001778 <condition_of_flag>:

void condition_of_flag()
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
	while (1) // if in here <=> receive right data
	  {
		if (data_after_cut[0] == SET_POSI) //
 800177e:	4b64      	ldr	r3, [pc, #400]	; (8001910 <condition_of_flag+0x198>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b22      	cmp	r3, #34	; 0x22
 8001784:	d108      	bne.n	8001798 <condition_of_flag+0x20>
		{
		  setpointQt = *((float *)(data_after_cut + 1));
 8001786:	4b62      	ldr	r3, [pc, #392]	; (8001910 <condition_of_flag+0x198>)
 8001788:	3301      	adds	r3, #1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a61      	ldr	r2, [pc, #388]	; (8001914 <condition_of_flag+0x19c>)
 800178e:	6013      	str	r3, [r2, #0]
		  checkModeFromQt = MODE_POSI; // position
 8001790:	4b61      	ldr	r3, [pc, #388]	; (8001918 <condition_of_flag+0x1a0>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
		  break;
 8001796:	e0b6      	b.n	8001906 <condition_of_flag+0x18e>
		}
		else if (data_after_cut[0] == SET_VELO) //
 8001798:	4b5d      	ldr	r3, [pc, #372]	; (8001910 <condition_of_flag+0x198>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b33      	cmp	r3, #51	; 0x33
 800179e:	d108      	bne.n	80017b2 <condition_of_flag+0x3a>
		{
		  setpointQt = *((float *)(data_after_cut + 1));
 80017a0:	4b5b      	ldr	r3, [pc, #364]	; (8001910 <condition_of_flag+0x198>)
 80017a2:	3301      	adds	r3, #1
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a5b      	ldr	r2, [pc, #364]	; (8001914 <condition_of_flag+0x19c>)
 80017a8:	6013      	str	r3, [r2, #0]
		  checkModeFromQt = MODE_VELO; // velocity
 80017aa:	4b5b      	ldr	r3, [pc, #364]	; (8001918 <condition_of_flag+0x1a0>)
 80017ac:	2202      	movs	r2, #2
 80017ae:	701a      	strb	r2, [r3, #0]
		  break;
 80017b0:	e0a9      	b.n	8001906 <condition_of_flag+0x18e>
		}
		else if (data_after_cut[0] == ENABLEE)
 80017b2:	4b57      	ldr	r3, [pc, #348]	; (8001910 <condition_of_flag+0x198>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b55      	cmp	r3, #85	; 0x55
 80017b8:	d103      	bne.n	80017c2 <condition_of_flag+0x4a>
		{
		  flag_motor = true;
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <condition_of_flag+0x1a4>)
 80017bc:	2201      	movs	r2, #1
 80017be:	701a      	strb	r2, [r3, #0]
		  break;
 80017c0:	e0a1      	b.n	8001906 <condition_of_flag+0x18e>
		}
		else if (data_after_cut[0] == PARA_K)
 80017c2:	4b53      	ldr	r3, [pc, #332]	; (8001910 <condition_of_flag+0x198>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b11      	cmp	r3, #17
 80017c8:	d10f      	bne.n	80017ea <condition_of_flag+0x72>
		{
		  Kp_true = *((float *)(data_after_cut + 1));
 80017ca:	4b51      	ldr	r3, [pc, #324]	; (8001910 <condition_of_flag+0x198>)
 80017cc:	3301      	adds	r3, #1
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a53      	ldr	r2, [pc, #332]	; (8001920 <condition_of_flag+0x1a8>)
 80017d2:	6013      	str	r3, [r2, #0]
		  Ki_true = *((float *)(data_after_cut + 5));
 80017d4:	4b4e      	ldr	r3, [pc, #312]	; (8001910 <condition_of_flag+0x198>)
 80017d6:	3305      	adds	r3, #5
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a52      	ldr	r2, [pc, #328]	; (8001924 <condition_of_flag+0x1ac>)
 80017dc:	6013      	str	r3, [r2, #0]
		  Kd_true = *((float *)(data_after_cut + 9));
 80017de:	4b4c      	ldr	r3, [pc, #304]	; (8001910 <condition_of_flag+0x198>)
 80017e0:	3309      	adds	r3, #9
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a50      	ldr	r2, [pc, #320]	; (8001928 <condition_of_flag+0x1b0>)
 80017e6:	6013      	str	r3, [r2, #0]
		  break;
 80017e8:	e08d      	b.n	8001906 <condition_of_flag+0x18e>
		}
		else if (data_after_cut[0] == CHOOSE) // choose mode PID1 or PID2
 80017ea:	4b49      	ldr	r3, [pc, #292]	; (8001910 <condition_of_flag+0x198>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b88      	cmp	r3, #136	; 0x88
 80017f0:	d11c      	bne.n	800182c <condition_of_flag+0xb4>
		{
		  float floatData;
		  memcpy(&floatData, data_after_cut + 1, sizeof(float));
 80017f2:	4b4e      	ldr	r3, [pc, #312]	; (800192c <condition_of_flag+0x1b4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	607b      	str	r3, [r7, #4]
		  if (floatData == 1.0f)
 80017f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001800:	eef4 7a47 	vcmp.f32	s15, s14
 8001804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001808:	d103      	bne.n	8001812 <condition_of_flag+0x9a>
		  {
			choose_PID = Select_PID1;
 800180a:	4b49      	ldr	r3, [pc, #292]	; (8001930 <condition_of_flag+0x1b8>)
 800180c:	2202      	movs	r2, #2
 800180e:	701a      	strb	r2, [r3, #0]
			break;
 8001810:	e079      	b.n	8001906 <condition_of_flag+0x18e>
		  }
		  else if (floatData == 2.0f)
 8001812:	edd7 7a01 	vldr	s15, [r7, #4]
 8001816:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800181a:	eef4 7a47 	vcmp.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	d16f      	bne.n	8001904 <condition_of_flag+0x18c>
		  {
			choose_PID = Select_PID2;
 8001824:	4b42      	ldr	r3, [pc, #264]	; (8001930 <condition_of_flag+0x1b8>)
 8001826:	2203      	movs	r2, #3
 8001828:	701a      	strb	r2, [r3, #0]
			break;
 800182a:	e06c      	b.n	8001906 <condition_of_flag+0x18e>
		  else
		  {
			break;
		  }
		}
		else if (data_after_cut[0] == RESETT)
 800182c:	4b38      	ldr	r3, [pc, #224]	; (8001910 <condition_of_flag+0x198>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b44      	cmp	r3, #68	; 0x44
 8001832:	d1a4      	bne.n	800177e <condition_of_flag+0x6>
		{
		  Kp_true = Ki_true = Kd_true = 0; // Reset
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <condition_of_flag+0x1b0>)
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <condition_of_flag+0x1b0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a38      	ldr	r2, [pc, #224]	; (8001924 <condition_of_flag+0x1ac>)
 8001842:	6013      	str	r3, [r2, #0]
 8001844:	4b37      	ldr	r3, [pc, #220]	; (8001924 <condition_of_flag+0x1ac>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a35      	ldr	r2, [pc, #212]	; (8001920 <condition_of_flag+0x1a8>)
 800184a:	6013      	str	r3, [r2, #0]
		  htim2.Instance->CNT = 0;
 800184c:	4b39      	ldr	r3, [pc, #228]	; (8001934 <condition_of_flag+0x1bc>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2200      	movs	r2, #0
 8001852:	625a      	str	r2, [r3, #36]	; 0x24
		  instance_enc.position = 0;
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <condition_of_flag+0x1c0>)
 8001856:	2200      	movs	r2, #0
 8001858:	601a      	str	r2, [r3, #0]
		  instance_enc.speed_by_encoder = 0;
 800185a:	4b37      	ldr	r3, [pc, #220]	; (8001938 <condition_of_flag+0x1c0>)
 800185c:	2200      	movs	r2, #0
 800185e:	809a      	strh	r2, [r3, #4]
		  setpointQt = 0;
 8001860:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <condition_of_flag+0x19c>)
 8001862:	f04f 0200 	mov.w	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
		  if (checkModeFromQt == MODE_POSI)
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <condition_of_flag+0x1a0>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d117      	bne.n	80018a0 <condition_of_flag+0x128>
		  {
			control_PID_Position(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 8001870:	4b28      	ldr	r3, [pc, #160]	; (8001914 <condition_of_flag+0x19c>)
 8001872:	edd3 7a00 	vldr	s15, [r3]
 8001876:	4b2a      	ldr	r3, [pc, #168]	; (8001920 <condition_of_flag+0x1a8>)
 8001878:	ed93 7a00 	vldr	s14, [r3]
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <condition_of_flag+0x1ac>)
 800187e:	edd3 6a00 	vldr	s13, [r3]
 8001882:	4b29      	ldr	r3, [pc, #164]	; (8001928 <condition_of_flag+0x1b0>)
 8001884:	ed93 6a00 	vldr	s12, [r3]
 8001888:	eef0 1a46 	vmov.f32	s3, s12
 800188c:	eeb0 1a66 	vmov.f32	s2, s13
 8001890:	eef0 0a47 	vmov.f32	s1, s14
 8001894:	eeb0 0a67 	vmov.f32	s0, s15
 8001898:	4828      	ldr	r0, [pc, #160]	; (800193c <condition_of_flag+0x1c4>)
 800189a:	f004 f909 	bl	8005ab0 <control_PID_Position>
 800189e:	e01a      	b.n	80018d6 <condition_of_flag+0x15e>
		  }
		  else if (checkModeFromQt == MODE_VELO)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <condition_of_flag+0x1a0>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d116      	bne.n	80018d6 <condition_of_flag+0x15e>
		  {
			control_PID_Velocity(&PID_contr, setpointQt, Kp_true, Ki_true, Kd_true);
 80018a8:	4b1a      	ldr	r3, [pc, #104]	; (8001914 <condition_of_flag+0x19c>)
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <condition_of_flag+0x1a8>)
 80018b0:	ed93 7a00 	vldr	s14, [r3]
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <condition_of_flag+0x1ac>)
 80018b6:	edd3 6a00 	vldr	s13, [r3]
 80018ba:	4b1b      	ldr	r3, [pc, #108]	; (8001928 <condition_of_flag+0x1b0>)
 80018bc:	ed93 6a00 	vldr	s12, [r3]
 80018c0:	eef0 1a46 	vmov.f32	s3, s12
 80018c4:	eeb0 1a66 	vmov.f32	s2, s13
 80018c8:	eef0 0a47 	vmov.f32	s1, s14
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	481a      	ldr	r0, [pc, #104]	; (800193c <condition_of_flag+0x1c4>)
 80018d2:	f004 f9cd 	bl	8005c70 <control_PID_Velocity>
		  }
		  output_pid = 0;
 80018d6:	4b1a      	ldr	r3, [pc, #104]	; (8001940 <condition_of_flag+0x1c8>)
 80018d8:	f04f 0200 	mov.w	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET); // force silence motor and stop motor
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4817      	ldr	r0, [pc, #92]	; (8001944 <condition_of_flag+0x1cc>)
 80018e6:	f001 f9e9 	bl	8002cbc <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f0:	4814      	ldr	r0, [pc, #80]	; (8001944 <condition_of_flag+0x1cc>)
 80018f2:	f001 f9e3 	bl	8002cbc <HAL_GPIO_WritePin>
		  checkModeFromQt = 0;
 80018f6:	4b08      	ldr	r3, [pc, #32]	; (8001918 <condition_of_flag+0x1a0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	701a      	strb	r2, [r3, #0]
		  flag_motor = false;
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <condition_of_flag+0x1a4>)
 80018fe:	2200      	movs	r2, #0
 8001900:	701a      	strb	r2, [r3, #0]
		  break;
 8001902:	e000      	b.n	8001906 <condition_of_flag+0x18e>
			break;
 8001904:	bf00      	nop
		}
	  }
}
 8001906:	bf00      	nop
 8001908:	3708      	adds	r7, #8
 800190a:	46bd      	mov	sp, r7
 800190c:	bd80      	pop	{r7, pc}
 800190e:	bf00      	nop
 8001910:	200002dc 	.word	0x200002dc
 8001914:	200002a0 	.word	0x200002a0
 8001918:	200002a4 	.word	0x200002a4
 800191c:	200002ee 	.word	0x200002ee
 8001920:	20000294 	.word	0x20000294
 8001924:	20000298 	.word	0x20000298
 8001928:	2000029c 	.word	0x2000029c
 800192c:	200002dd 	.word	0x200002dd
 8001930:	200002f0 	.word	0x200002f0
 8001934:	200000d8 	.word	0x200000d8
 8001938:	20000320 	.word	0x20000320
 800193c:	20000330 	.word	0x20000330
 8001940:	2000026c 	.word	0x2000026c
 8001944:	40020800 	.word	0x40020800

08001948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800194c:	b672      	cpsid	i
}
 800194e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001950:	e7fe      	b.n	8001950 <Error_Handler+0x8>
	...

08001954 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	607b      	str	r3, [r7, #4]
 800195e:	4b10      	ldr	r3, [pc, #64]	; (80019a0 <HAL_MspInit+0x4c>)
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	4a0f      	ldr	r2, [pc, #60]	; (80019a0 <HAL_MspInit+0x4c>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001968:	6453      	str	r3, [r2, #68]	; 0x44
 800196a:	4b0d      	ldr	r3, [pc, #52]	; (80019a0 <HAL_MspInit+0x4c>)
 800196c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800196e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001972:	607b      	str	r3, [r7, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	603b      	str	r3, [r7, #0]
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_MspInit+0x4c>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a08      	ldr	r2, [pc, #32]	; (80019a0 <HAL_MspInit+0x4c>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b06      	ldr	r3, [pc, #24]	; (80019a0 <HAL_MspInit+0x4c>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a0b      	ldr	r2, [pc, #44]	; (80019e0 <HAL_TIM_PWM_MspInit+0x3c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d10d      	bne.n	80019d2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a09      	ldr	r2, [pc, #36]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019c0:	f043 0301 	orr.w	r3, r3, #1
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <HAL_TIM_PWM_MspInit+0x40>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3714      	adds	r7, #20
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	40010000 	.word	0x40010000
 80019e4:	40023800 	.word	0x40023800

080019e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a08:	d12b      	bne.n	8001a62 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b17      	ldr	r3, [pc, #92]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a14:	f043 0301 	orr.w	r3, r3, #1
 8001a18:	6413      	str	r3, [r2, #64]	; 0x40
 8001a1a:	4b14      	ldr	r3, [pc, #80]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f003 0301 	and.w	r3, r3, #1
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a26:	2300      	movs	r3, #0
 8001a28:	60fb      	str	r3, [r7, #12]
 8001a2a:	4b10      	ldr	r3, [pc, #64]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a30:	f043 0301 	orr.w	r3, r3, #1
 8001a34:	6313      	str	r3, [r2, #48]	; 0x30
 8001a36:	4b0d      	ldr	r3, [pc, #52]	; (8001a6c <HAL_TIM_Encoder_MspInit+0x84>)
 8001a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = ENC_TIM2_CH2_Pin|ENC_TIM2_CH1_Pin;
 8001a42:	2322      	movs	r3, #34	; 0x22
 8001a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a46:	2302      	movs	r3, #2
 8001a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a52:	2301      	movs	r3, #1
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a56:	f107 0314 	add.w	r3, r7, #20
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4804      	ldr	r0, [pc, #16]	; (8001a70 <HAL_TIM_Encoder_MspInit+0x88>)
 8001a5e:	f000 ff91 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0e      	ldr	r2, [pc, #56]	; (8001abc <HAL_TIM_Base_MspInit+0x48>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d115      	bne.n	8001ab2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8e:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a90:	f043 0302 	orr.w	r3, r3, #2
 8001a94:	6413      	str	r3, [r2, #64]	; 0x40
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <HAL_TIM_Base_MspInit+0x4c>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	60fb      	str	r3, [r7, #12]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	2100      	movs	r1, #0
 8001aa6:	201d      	movs	r0, #29
 8001aa8:	f000 fb2f 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001aac:	201d      	movs	r0, #29
 8001aae:	f000 fb48 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40000400 	.word	0x40000400
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 030c 	add.w	r3, r7, #12
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a12      	ldr	r2, [pc, #72]	; (8001b2c <HAL_TIM_MspPostInit+0x68>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d11e      	bne.n	8001b24 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60bb      	str	r3, [r7, #8]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_TIM_MspPostInit+0x6c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_TIM_MspPostInit+0x6c>)
 8001af0:	f043 0310 	orr.w	r3, r3, #16
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_TIM_MspPostInit+0x6c>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0310 	and.w	r3, r3, #16
 8001afe:	60bb      	str	r3, [r7, #8]
 8001b00:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE13     ------> TIM1_CH3
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_TIM1_CH3_Pin|PWM_TIM1_CH4_Pin;
 8001b02:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001b06:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b14:	2301      	movs	r3, #1
 8001b16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_TIM_MspPostInit+0x70>)
 8001b20:	f000 ff30 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001b24:	bf00      	nop
 8001b26:	3720      	adds	r7, #32
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	40010000 	.word	0x40010000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_UART_MspInit+0x160>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	f040 8099 	bne.w	8001c8e <HAL_UART_MspInit+0x156>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	4b4e      	ldr	r3, [pc, #312]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b64:	4a4d      	ldr	r2, [pc, #308]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b6a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6c:	4b4b      	ldr	r3, [pc, #300]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b78:	2300      	movs	r3, #0
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4a46      	ldr	r2, [pc, #280]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6313      	str	r3, [r2, #48]	; 0x30
 8001b88:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_UART_MspInit+0x164>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b94:	230c      	movs	r3, #12
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	483c      	ldr	r0, [pc, #240]	; (8001ca0 <HAL_UART_MspInit+0x168>)
 8001bb0:	f000 fee8 	bl	8002984 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bb6:	4a3c      	ldr	r2, [pc, #240]	; (8001ca8 <HAL_UART_MspInit+0x170>)
 8001bb8:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001bba:	4b3a      	ldr	r3, [pc, #232]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bc0:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001bc2:	4b38      	ldr	r3, [pc, #224]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bc8:	4b36      	ldr	r3, [pc, #216]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001bce:	4b35      	ldr	r3, [pc, #212]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bd4:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bd6:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bdc:	4b31      	ldr	r3, [pc, #196]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001be2:	4b30      	ldr	r3, [pc, #192]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001be8:	4b2e      	ldr	r3, [pc, #184]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001bee:	4b2d      	ldr	r3, [pc, #180]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bf0:	2204      	movs	r2, #4
 8001bf2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001bf4:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 8001bfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8001c00:	4b28      	ldr	r3, [pc, #160]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001c06:	4827      	ldr	r0, [pc, #156]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001c08:	f000 faba 	bl	8002180 <HAL_DMA_Init>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d001      	beq.n	8001c16 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8001c12:	f7ff fe99 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a22      	ldr	r2, [pc, #136]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
 8001c1c:	4a21      	ldr	r2, [pc, #132]	; (8001ca4 <HAL_UART_MspInit+0x16c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001c22:	4b22      	ldr	r3, [pc, #136]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_UART_MspInit+0x178>)
 8001c26:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001c28:	4b20      	ldr	r3, [pc, #128]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c2a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c2e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001c30:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c36:	4b1d      	ldr	r3, [pc, #116]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c42:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001c50:	4b16      	ldr	r3, [pc, #88]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001c56:	4b15      	ldr	r3, [pc, #84]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001c62:	4812      	ldr	r0, [pc, #72]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c64:	f000 fa8c 	bl	8002180 <HAL_DMA_Init>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d001      	beq.n	8001c72 <HAL_UART_MspInit+0x13a>
    {
      Error_Handler();
 8001c6e:	f7ff fe6b 	bl	8001948 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34
 8001c78:	4a0c      	ldr	r2, [pc, #48]	; (8001cac <HAL_UART_MspInit+0x174>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c7e:	2200      	movs	r2, #0
 8001c80:	2100      	movs	r1, #0
 8001c82:	2026      	movs	r0, #38	; 0x26
 8001c84:	f000 fa41 	bl	800210a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c88:	2026      	movs	r0, #38	; 0x26
 8001c8a:	f000 fa5a 	bl	8002142 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c8e:	bf00      	nop
 8001c90:	3728      	adds	r7, #40	; 0x28
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40004400 	.word	0x40004400
 8001c9c:	40023800 	.word	0x40023800
 8001ca0:	40020000 	.word	0x40020000
 8001ca4:	200001ac 	.word	0x200001ac
 8001ca8:	40026088 	.word	0x40026088
 8001cac:	2000020c 	.word	0x2000020c
 8001cb0:	400260a0 	.word	0x400260a0

08001cb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb8:	e7fe      	b.n	8001cb8 <NMI_Handler+0x4>

08001cba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_NVIC_SystemReset();
 8001cbe:	f000 fa4e 	bl	800215e <HAL_NVIC_SystemReset>
	return;
 8001cc2:	bf00      	nop
//  while (1)
//  {
//    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
//    /* USER CODE END W1_HardFault_IRQn 0 */
//  }
}
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cca:	e7fe      	b.n	8001cca <MemManage_Handler+0x4>

08001ccc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd0:	e7fe      	b.n	8001cd0 <BusFault_Handler+0x4>

08001cd2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd6:	e7fe      	b.n	8001cd6 <UsageFault_Handler+0x4>

08001cd8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d06:	f000 f8ef 	bl	8001ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream5_IRQHandler+0x10>)
 8001d16:	f000 fbcb 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200001ac 	.word	0x200001ac

08001d24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA1_Stream6_IRQHandler+0x10>)
 8001d2a:	f000 fbc1 	bl	80024b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	2000020c 	.word	0x2000020c

08001d38 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <TIM3_IRQHandler+0x10>)
 8001d3e:	f001 ff3b 	bl	8003bb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000120 	.word	0x20000120

08001d4c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <USART2_IRQHandler+0x10>)
 8001d52:	f002 fed9 	bl	8004b08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20000168 	.word	0x20000168

08001d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <_sbrk+0x5c>)
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <_sbrk+0x60>)
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d102      	bne.n	8001d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d7c:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <_sbrk+0x64>)
 8001d7e:	4a12      	ldr	r2, [pc, #72]	; (8001dc8 <_sbrk+0x68>)
 8001d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d207      	bcs.n	8001da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d90:	f004 fab4 	bl	80062fc <__errno>
 8001d94:	4603      	mov	r3, r0
 8001d96:	220c      	movs	r2, #12
 8001d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d9e:	e009      	b.n	8001db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da0:	4b08      	ldr	r3, [pc, #32]	; (8001dc4 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001da6:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	4a05      	ldr	r2, [pc, #20]	; (8001dc4 <_sbrk+0x64>)
 8001db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001db2:	68fb      	ldr	r3, [r7, #12]
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3718      	adds	r7, #24
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20020000 	.word	0x20020000
 8001dc0:	00000400 	.word	0x00000400
 8001dc4:	2000033c 	.word	0x2000033c
 8001dc8:	20000358 	.word	0x20000358

08001dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dd0:	4b06      	ldr	r3, [pc, #24]	; (8001dec <SystemInit+0x20>)
 8001dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dd6:	4a05      	ldr	r2, [pc, #20]	; (8001dec <SystemInit+0x20>)
 8001dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de0:	bf00      	nop
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001df6:	490e      	ldr	r1, [pc, #56]	; (8001e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001df8:	4a0e      	ldr	r2, [pc, #56]	; (8001e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dfc:	e002      	b.n	8001e04 <LoopCopyDataInit>

08001dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e02:	3304      	adds	r3, #4

08001e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e08:	d3f9      	bcc.n	8001dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e0a:	4a0b      	ldr	r2, [pc, #44]	; (8001e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e0c:	4c0b      	ldr	r4, [pc, #44]	; (8001e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e10:	e001      	b.n	8001e16 <LoopFillZerobss>

08001e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e14:	3204      	adds	r2, #4

08001e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e18:	d3fb      	bcc.n	8001e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e1a:	f7ff ffd7 	bl	8001dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e1e:	f004 fa73 	bl	8006308 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e22:	f7fe ff71 	bl	8000d08 <main>
  bx  lr    
 8001e26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e30:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001e34:	080067e0 	.word	0x080067e0
  ldr r2, =_sbss
 8001e38:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001e3c:	20000354 	.word	0x20000354

08001e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e40:	e7fe      	b.n	8001e40 <ADC_IRQHandler>
	...

08001e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e48:	4b0e      	ldr	r3, [pc, #56]	; (8001e84 <HAL_Init+0x40>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0d      	ldr	r2, [pc, #52]	; (8001e84 <HAL_Init+0x40>)
 8001e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e54:	4b0b      	ldr	r3, [pc, #44]	; (8001e84 <HAL_Init+0x40>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a0a      	ldr	r2, [pc, #40]	; (8001e84 <HAL_Init+0x40>)
 8001e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <HAL_Init+0x40>)
 8001e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e6c:	2003      	movs	r0, #3
 8001e6e:	f000 f941 	bl	80020f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e72:	200f      	movs	r0, #15
 8001e74:	f000 f808 	bl	8001e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e78:	f7ff fd6c 	bl	8001954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023c00 	.word	0x40023c00

08001e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <HAL_InitTick+0x54>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b12      	ldr	r3, [pc, #72]	; (8001ee0 <HAL_InitTick+0x58>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f95d 	bl	8002166 <HAL_SYSTICK_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d001      	beq.n	8001eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00e      	b.n	8001ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b0f      	cmp	r3, #15
 8001eba:	d80a      	bhi.n	8001ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	6879      	ldr	r1, [r7, #4]
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f000 f921 	bl	800210a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec8:	4a06      	ldr	r2, [pc, #24]	; (8001ee4 <HAL_InitTick+0x5c>)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e000      	b.n	8001ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3708      	adds	r7, #8
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20000004 	.word	0x20000004
 8001ee0:	2000000c 	.word	0x2000000c
 8001ee4:	20000008 	.word	0x20000008

08001ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001eec:	4b06      	ldr	r3, [pc, #24]	; (8001f08 <HAL_IncTick+0x20>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_IncTick+0x24>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <HAL_IncTick+0x24>)
 8001efa:	6013      	str	r3, [r2, #0]
}
 8001efc:	bf00      	nop
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	2000000c 	.word	0x2000000c
 8001f0c:	20000340 	.word	0x20000340

08001f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return uwTick;
 8001f14:	4b03      	ldr	r3, [pc, #12]	; (8001f24 <HAL_GetTick+0x14>)
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	20000340 	.word	0x20000340

08001f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b085      	sub	sp, #20
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	f003 0307 	and.w	r3, r3, #7
 8001f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f44:	4013      	ands	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f5a:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <__NVIC_SetPriorityGrouping+0x44>)
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	60d3      	str	r3, [r2, #12]
}
 8001f60:	bf00      	nop
 8001f62:	3714      	adds	r7, #20
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr
 8001f6c:	e000ed00 	.word	0xe000ed00

08001f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f74:	4b04      	ldr	r3, [pc, #16]	; (8001f88 <__NVIC_GetPriorityGrouping+0x18>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	0a1b      	lsrs	r3, r3, #8
 8001f7a:	f003 0307 	and.w	r3, r3, #7
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr
 8001f88:	e000ed00 	.word	0xe000ed00

08001f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	4603      	mov	r3, r0
 8001f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	db0b      	blt.n	8001fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	f003 021f 	and.w	r2, r3, #31
 8001fa4:	4907      	ldr	r1, [pc, #28]	; (8001fc4 <__NVIC_EnableIRQ+0x38>)
 8001fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001faa:	095b      	lsrs	r3, r3, #5
 8001fac:	2001      	movs	r0, #1
 8001fae:	fa00 f202 	lsl.w	r2, r0, r2
 8001fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000e100 	.word	0xe000e100

08001fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	4603      	mov	r3, r0
 8001fd0:	6039      	str	r1, [r7, #0]
 8001fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	db0a      	blt.n	8001ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	490c      	ldr	r1, [pc, #48]	; (8002014 <__NVIC_SetPriority+0x4c>)
 8001fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe6:	0112      	lsls	r2, r2, #4
 8001fe8:	b2d2      	uxtb	r2, r2
 8001fea:	440b      	add	r3, r1
 8001fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ff0:	e00a      	b.n	8002008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	b2da      	uxtb	r2, r3
 8001ff6:	4908      	ldr	r1, [pc, #32]	; (8002018 <__NVIC_SetPriority+0x50>)
 8001ff8:	79fb      	ldrb	r3, [r7, #7]
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	3b04      	subs	r3, #4
 8002000:	0112      	lsls	r2, r2, #4
 8002002:	b2d2      	uxtb	r2, r2
 8002004:	440b      	add	r3, r1
 8002006:	761a      	strb	r2, [r3, #24]
}
 8002008:	bf00      	nop
 800200a:	370c      	adds	r7, #12
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr
 8002014:	e000e100 	.word	0xe000e100
 8002018:	e000ed00 	.word	0xe000ed00

0800201c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800201c:	b480      	push	{r7}
 800201e:	b089      	sub	sp, #36	; 0x24
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	f1c3 0307 	rsb	r3, r3, #7
 8002036:	2b04      	cmp	r3, #4
 8002038:	bf28      	it	cs
 800203a:	2304      	movcs	r3, #4
 800203c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3304      	adds	r3, #4
 8002042:	2b06      	cmp	r3, #6
 8002044:	d902      	bls.n	800204c <NVIC_EncodePriority+0x30>
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	3b03      	subs	r3, #3
 800204a:	e000      	b.n	800204e <NVIC_EncodePriority+0x32>
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002050:	f04f 32ff 	mov.w	r2, #4294967295
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	43da      	mvns	r2, r3
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	401a      	ands	r2, r3
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002064:	f04f 31ff 	mov.w	r1, #4294967295
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa01 f303 	lsl.w	r3, r1, r3
 800206e:	43d9      	mvns	r1, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	4313      	orrs	r3, r2
         );
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
	...

08002084 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002088:	f3bf 8f4f 	dsb	sy
}
 800208c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <__NVIC_SystemReset+0x24>)
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002096:	4904      	ldr	r1, [pc, #16]	; (80020a8 <__NVIC_SystemReset+0x24>)
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <__NVIC_SystemReset+0x28>)
 800209a:	4313      	orrs	r3, r2
 800209c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800209e:	f3bf 8f4f 	dsb	sy
}
 80020a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80020a4:	bf00      	nop
 80020a6:	e7fd      	b.n	80020a4 <__NVIC_SystemReset+0x20>
 80020a8:	e000ed00 	.word	0xe000ed00
 80020ac:	05fa0004 	.word	0x05fa0004

080020b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020c0:	d301      	bcc.n	80020c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020c2:	2301      	movs	r3, #1
 80020c4:	e00f      	b.n	80020e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <SysTick_Config+0x40>)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3b01      	subs	r3, #1
 80020cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020ce:	210f      	movs	r1, #15
 80020d0:	f04f 30ff 	mov.w	r0, #4294967295
 80020d4:	f7ff ff78 	bl	8001fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d8:	4b05      	ldr	r3, [pc, #20]	; (80020f0 <SysTick_Config+0x40>)
 80020da:	2200      	movs	r2, #0
 80020dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020de:	4b04      	ldr	r3, [pc, #16]	; (80020f0 <SysTick_Config+0x40>)
 80020e0:	2207      	movs	r2, #7
 80020e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020e4:	2300      	movs	r3, #0
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3708      	adds	r7, #8
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	e000e010 	.word	0xe000e010

080020f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff ff13 	bl	8001f28 <__NVIC_SetPriorityGrouping>
}
 8002102:	bf00      	nop
 8002104:	3708      	adds	r7, #8
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800210a:	b580      	push	{r7, lr}
 800210c:	b086      	sub	sp, #24
 800210e:	af00      	add	r7, sp, #0
 8002110:	4603      	mov	r3, r0
 8002112:	60b9      	str	r1, [r7, #8]
 8002114:	607a      	str	r2, [r7, #4]
 8002116:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002118:	2300      	movs	r3, #0
 800211a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800211c:	f7ff ff28 	bl	8001f70 <__NVIC_GetPriorityGrouping>
 8002120:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	68b9      	ldr	r1, [r7, #8]
 8002126:	6978      	ldr	r0, [r7, #20]
 8002128:	f7ff ff78 	bl	800201c <NVIC_EncodePriority>
 800212c:	4602      	mov	r2, r0
 800212e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002132:	4611      	mov	r1, r2
 8002134:	4618      	mov	r0, r3
 8002136:	f7ff ff47 	bl	8001fc8 <__NVIC_SetPriority>
}
 800213a:	bf00      	nop
 800213c:	3718      	adds	r7, #24
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	4603      	mov	r3, r0
 800214a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800214c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002150:	4618      	mov	r0, r3
 8002152:	f7ff ff1b 	bl	8001f8c <__NVIC_EnableIRQ>
}
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002162:	f7ff ff8f 	bl	8002084 <__NVIC_SystemReset>

08002166 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	b082      	sub	sp, #8
 800216a:	af00      	add	r7, sp, #0
 800216c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f7ff ff9e 	bl	80020b0 <SysTick_Config>
 8002174:	4603      	mov	r3, r0
}
 8002176:	4618      	mov	r0, r3
 8002178:	3708      	adds	r7, #8
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}
	...

08002180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800218c:	f7ff fec0 	bl	8001f10 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e099      	b.n	80022d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f022 0201 	bic.w	r2, r2, #1
 80021ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021bc:	e00f      	b.n	80021de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021be:	f7ff fea7 	bl	8001f10 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b05      	cmp	r3, #5
 80021ca:	d908      	bls.n	80021de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2220      	movs	r2, #32
 80021d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2203      	movs	r2, #3
 80021d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e078      	b.n	80022d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d1e8      	bne.n	80021be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021f4:	697a      	ldr	r2, [r7, #20]
 80021f6:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_DMA_Init+0x158>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	691b      	ldr	r3, [r3, #16]
 8002210:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002216:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002222:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6a1b      	ldr	r3, [r3, #32]
 8002228:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002234:	2b04      	cmp	r3, #4
 8002236:	d107      	bne.n	8002248 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002240:	4313      	orrs	r3, r2
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	f023 0307 	bic.w	r3, r3, #7
 800225e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800226e:	2b04      	cmp	r3, #4
 8002270:	d117      	bne.n	80022a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f000 fb01 	bl	800288c <DMA_CheckFifoParam>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2240      	movs	r2, #64	; 0x40
 8002294:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800229e:	2301      	movs	r3, #1
 80022a0:	e016      	b.n	80022d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	697a      	ldr	r2, [r7, #20]
 80022a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 fab8 	bl	8002820 <DMA_CalcBaseAndBitshift>
 80022b0:	4603      	mov	r3, r0
 80022b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b8:	223f      	movs	r2, #63	; 0x3f
 80022ba:	409a      	lsls	r2, r3
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2200      	movs	r2, #0
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2201      	movs	r2, #1
 80022ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	3718      	adds	r7, #24
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	f010803f 	.word	0xf010803f

080022dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
 80022e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022ea:	2300      	movs	r3, #0
 80022ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_DMA_Start_IT+0x26>
 80022fe:	2302      	movs	r3, #2
 8002300:	e040      	b.n	8002384 <HAL_DMA_Start_IT+0xa8>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b01      	cmp	r3, #1
 8002314:	d12f      	bne.n	8002376 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2202      	movs	r2, #2
 800231a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2200      	movs	r2, #0
 8002322:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68b9      	ldr	r1, [r7, #8]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fa4a 	bl	80027c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	223f      	movs	r2, #63	; 0x3f
 8002336:	409a      	lsls	r2, r3
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f042 0216 	orr.w	r2, r2, #22
 800234a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	2b00      	cmp	r3, #0
 8002352:	d007      	beq.n	8002364 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f042 0208 	orr.w	r2, r2, #8
 8002362:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f042 0201 	orr.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
 8002374:	e005      	b.n	8002382 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800237e:	2302      	movs	r3, #2
 8002380:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002382:	7dfb      	ldrb	r3, [r7, #23]
}
 8002384:	4618      	mov	r0, r3
 8002386:	3718      	adds	r7, #24
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002398:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800239a:	f7ff fdb9 	bl	8001f10 <HAL_GetTick>
 800239e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d008      	beq.n	80023be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2280      	movs	r2, #128	; 0x80
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e052      	b.n	8002464 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f022 0216 	bic.w	r2, r2, #22
 80023cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	695a      	ldr	r2, [r3, #20]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d103      	bne.n	80023ee <HAL_DMA_Abort+0x62>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d007      	beq.n	80023fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0208 	bic.w	r2, r2, #8
 80023fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 0201 	bic.w	r2, r2, #1
 800240c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800240e:	e013      	b.n	8002438 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002410:	f7ff fd7e 	bl	8001f10 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b05      	cmp	r3, #5
 800241c:	d90c      	bls.n	8002438 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2220      	movs	r2, #32
 8002422:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2203      	movs	r2, #3
 8002428:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e015      	b.n	8002464 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	d1e4      	bne.n	8002410 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800244a:	223f      	movs	r2, #63	; 0x3f
 800244c:	409a      	lsls	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2201      	movs	r2, #1
 8002456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002462:	2300      	movs	r3, #0
}
 8002464:	4618      	mov	r0, r3
 8002466:	3710      	adds	r7, #16
 8002468:	46bd      	mov	sp, r7
 800246a:	bd80      	pop	{r7, pc}

0800246c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d004      	beq.n	800248a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e00c      	b.n	80024a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2205      	movs	r2, #5
 800248e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0201 	bic.w	r2, r2, #1
 80024a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b086      	sub	sp, #24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024b8:	2300      	movs	r3, #0
 80024ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024bc:	4b8e      	ldr	r3, [pc, #568]	; (80026f8 <HAL_DMA_IRQHandler+0x248>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a8e      	ldr	r2, [pc, #568]	; (80026fc <HAL_DMA_IRQHandler+0x24c>)
 80024c2:	fba2 2303 	umull	r2, r3, r2, r3
 80024c6:	0a9b      	lsrs	r3, r3, #10
 80024c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024da:	2208      	movs	r2, #8
 80024dc:	409a      	lsls	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d01a      	beq.n	800251c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d013      	beq.n	800251c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f022 0204 	bic.w	r2, r2, #4
 8002502:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002508:	2208      	movs	r2, #8
 800250a:	409a      	lsls	r2, r3
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0201 	orr.w	r2, r3, #1
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002520:	2201      	movs	r2, #1
 8002522:	409a      	lsls	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	4013      	ands	r3, r2
 8002528:	2b00      	cmp	r3, #0
 800252a:	d012      	beq.n	8002552 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	695b      	ldr	r3, [r3, #20]
 8002532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00b      	beq.n	8002552 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253e:	2201      	movs	r2, #1
 8002540:	409a      	lsls	r2, r3
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	f043 0202 	orr.w	r2, r3, #2
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002556:	2204      	movs	r2, #4
 8002558:	409a      	lsls	r2, r3
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	2b00      	cmp	r3, #0
 8002560:	d012      	beq.n	8002588 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d00b      	beq.n	8002588 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002574:	2204      	movs	r2, #4
 8002576:	409a      	lsls	r2, r3
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002580:	f043 0204 	orr.w	r2, r3, #4
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258c:	2210      	movs	r2, #16
 800258e:	409a      	lsls	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4013      	ands	r3, r2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d043      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d03c      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2210      	movs	r2, #16
 80025ac:	409a      	lsls	r2, r3
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d018      	beq.n	80025f2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d108      	bne.n	80025e0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d024      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	4798      	blx	r3
 80025de:	e01f      	b.n	8002620 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01b      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ec:	6878      	ldr	r0, [r7, #4]
 80025ee:	4798      	blx	r3
 80025f0:	e016      	b.n	8002620 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d107      	bne.n	8002610 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f022 0208 	bic.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002624:	2220      	movs	r2, #32
 8002626:	409a      	lsls	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	4013      	ands	r3, r2
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 808f 	beq.w	8002750 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0310 	and.w	r3, r3, #16
 800263c:	2b00      	cmp	r3, #0
 800263e:	f000 8087 	beq.w	8002750 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002646:	2220      	movs	r2, #32
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b05      	cmp	r3, #5
 8002658:	d136      	bne.n	80026c8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f022 0216 	bic.w	r2, r2, #22
 8002668:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	695a      	ldr	r2, [r3, #20]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002678:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	2b00      	cmp	r3, #0
 8002680:	d103      	bne.n	800268a <HAL_DMA_IRQHandler+0x1da>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 0208 	bic.w	r2, r2, #8
 8002698:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269e:	223f      	movs	r2, #63	; 0x3f
 80026a0:	409a      	lsls	r2, r3
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2201      	movs	r2, #1
 80026aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d07e      	beq.n	80027bc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	4798      	blx	r3
        }
        return;
 80026c6:	e079      	b.n	80027bc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d01d      	beq.n	8002712 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10d      	bne.n	8002700 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d031      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
 80026f4:	e02c      	b.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
 80026f6:	bf00      	nop
 80026f8:	20000004 	.word	0x20000004
 80026fc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	2b00      	cmp	r3, #0
 8002706:	d023      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
 8002710:	e01e      	b.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10f      	bne.n	8002740 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	681a      	ldr	r2, [r3, #0]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 0210 	bic.w	r2, r2, #16
 800272e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	2b00      	cmp	r3, #0
 8002756:	d032      	beq.n	80027be <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800275c:	f003 0301 	and.w	r3, r3, #1
 8002760:	2b00      	cmp	r3, #0
 8002762:	d022      	beq.n	80027aa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2205      	movs	r2, #5
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0201 	bic.w	r2, r2, #1
 800277a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	3301      	adds	r3, #1
 8002780:	60bb      	str	r3, [r7, #8]
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	d307      	bcc.n	8002798 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 0301 	and.w	r3, r3, #1
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1f2      	bne.n	800277c <HAL_DMA_IRQHandler+0x2cc>
 8002796:	e000      	b.n	800279a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002798:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d005      	beq.n	80027be <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	4798      	blx	r3
 80027ba:	e000      	b.n	80027be <HAL_DMA_IRQHandler+0x30e>
        return;
 80027bc:	bf00      	nop
    }
  }
}
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b085      	sub	sp, #20
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
 80027d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	2b40      	cmp	r3, #64	; 0x40
 80027f0:	d108      	bne.n	8002804 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002802:	e007      	b.n	8002814 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	68ba      	ldr	r2, [r7, #8]
 800280a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	60da      	str	r2, [r3, #12]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3b10      	subs	r3, #16
 8002830:	4a14      	ldr	r2, [pc, #80]	; (8002884 <DMA_CalcBaseAndBitshift+0x64>)
 8002832:	fba2 2303 	umull	r2, r3, r2, r3
 8002836:	091b      	lsrs	r3, r3, #4
 8002838:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800283a:	4a13      	ldr	r2, [pc, #76]	; (8002888 <DMA_CalcBaseAndBitshift+0x68>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	4413      	add	r3, r2
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2b03      	cmp	r3, #3
 800284c:	d909      	bls.n	8002862 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002856:	f023 0303 	bic.w	r3, r3, #3
 800285a:	1d1a      	adds	r2, r3, #4
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	659a      	str	r2, [r3, #88]	; 0x58
 8002860:	e007      	b.n	8002872 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800286a:	f023 0303 	bic.w	r3, r3, #3
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002876:	4618      	mov	r0, r3
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	aaaaaaab 	.word	0xaaaaaaab
 8002888:	080065c8 	.word	0x080065c8

0800288c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d11f      	bne.n	80028e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d856      	bhi.n	800295a <DMA_CheckFifoParam+0xce>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <DMA_CheckFifoParam+0x28>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028c5 	.word	0x080028c5
 80028b8:	080028d7 	.word	0x080028d7
 80028bc:	080028c5 	.word	0x080028c5
 80028c0:	0800295b 	.word	0x0800295b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d046      	beq.n	800295e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028d4:	e043      	b.n	800295e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028de:	d140      	bne.n	8002962 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028e4:	e03d      	b.n	8002962 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ee:	d121      	bne.n	8002934 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d837      	bhi.n	8002966 <DMA_CheckFifoParam+0xda>
 80028f6:	a201      	add	r2, pc, #4	; (adr r2, 80028fc <DMA_CheckFifoParam+0x70>)
 80028f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028fc:	0800290d 	.word	0x0800290d
 8002900:	08002913 	.word	0x08002913
 8002904:	0800290d 	.word	0x0800290d
 8002908:	08002925 	.word	0x08002925
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	73fb      	strb	r3, [r7, #15]
      break;
 8002910:	e030      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002916:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d025      	beq.n	800296a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002922:	e022      	b.n	800296a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800292c:	d11f      	bne.n	800296e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002932:	e01c      	b.n	800296e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002934:	68bb      	ldr	r3, [r7, #8]
 8002936:	2b02      	cmp	r3, #2
 8002938:	d903      	bls.n	8002942 <DMA_CheckFifoParam+0xb6>
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d003      	beq.n	8002948 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002940:	e018      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	73fb      	strb	r3, [r7, #15]
      break;
 8002946:	e015      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d00e      	beq.n	8002972 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	73fb      	strb	r3, [r7, #15]
      break;
 8002958:	e00b      	b.n	8002972 <DMA_CheckFifoParam+0xe6>
      break;
 800295a:	bf00      	nop
 800295c:	e00a      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e008      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e006      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002966:	bf00      	nop
 8002968:	e004      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
 800296c:	e002      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;   
 800296e:	bf00      	nop
 8002970:	e000      	b.n	8002974 <DMA_CheckFifoParam+0xe8>
      break;
 8002972:	bf00      	nop
    }
  } 
  
  return status; 
 8002974:	7bfb      	ldrb	r3, [r7, #15]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e16b      	b.n	8002c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 815a 	bne.w	8002c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d130      	bne.n	8002a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 0201 	and.w	r2, r3, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d017      	beq.n	8002a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d123      	bne.n	8002ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80b4 	beq.w	8002c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b60      	ldr	r3, [pc, #384]	; (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a5f      	ldr	r2, [pc, #380]	; (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	; (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b26:	4a5b      	ldr	r2, [pc, #364]	; (8002c94 <HAL_GPIO_Init+0x310>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	; (8002c98 <HAL_GPIO_Init+0x314>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a51      	ldr	r2, [pc, #324]	; (8002c9c <HAL_GPIO_Init+0x318>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	; (8002ca0 <HAL_GPIO_Init+0x31c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_GPIO_Init+0x320>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4d      	ldr	r2, [pc, #308]	; (8002cac <HAL_GPIO_Init+0x328>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x20a>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e00e      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00c      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00a      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b96:	2305      	movs	r3, #5
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4935      	ldr	r1, [pc, #212]	; (8002c94 <HAL_GPIO_Init+0x310>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bca:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bee:	4a32      	ldr	r2, [pc, #200]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf4:	4b30      	ldr	r3, [pc, #192]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c18:	4a27      	ldr	r2, [pc, #156]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c42:	4a1d      	ldr	r2, [pc, #116]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6c:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f ae90 	bls.w	80029a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	; 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	40021c00 	.word	0x40021c00
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f8b2 	bl	8001f10 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff f8ae 	bl	8001f10 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f89e 	bl	8001f10 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f89a 	bl	8001f10 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff f853 	bl	8001f10 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff f84f 	bl	8001f10 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff f832 	bl	8001f10 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff f82e 	bl	8001f10 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7ff f812 	bl	8001f10 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff f80e 	bl	8001f10 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe fffb 	bl	8001f10 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe fff7 	bl	8001f10 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ffb7 	bl	8001f10 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe ffb3 	bl	8001f10 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe ff78 	bl	8001f10 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe ff74 	bl	8001f10 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe ff62 	bl	8001f10 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe ff5e 	bl	8001f10 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe ff32 	bl	8001f10 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe ff2e 	bl	8001f10 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe ff07 	bl	8001f10 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe ff03 	bl	8001f10 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fef0 	bl	8001f10 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe feec 	bl	8001f10 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fe1e 	bl	8001f10 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fe1a 	bl	8001f10 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fd7e 	bl	8001e88 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	080065b0 	.word	0x080065b0
 80033a4:	20000004 	.word	0x20000004
 80033a8:	20000008 	.word	0x20000008

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b090      	sub	sp, #64	; 0x40
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	; 0x34
 80033b8:	2300      	movs	r3, #0
 80033ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033bc:	2300      	movs	r3, #0
 80033be:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80a1 	bhi.w	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e09b      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b53      	ldr	r3, [pc, #332]	; (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033e2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80033e4:	e09b      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b53      	ldr	r3, [pc, #332]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80033ea:	e098      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b4f      	ldr	r3, [pc, #316]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d028      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b4a      	ldr	r3, [pc, #296]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	627a      	str	r2, [r7, #36]	; 0x24
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003414:	2100      	movs	r1, #0
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003418:	fb03 f201 	mul.w	r2, r3, r1
 800341c:	2300      	movs	r3, #0
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	4413      	add	r3, r2
 8003424:	4a43      	ldr	r2, [pc, #268]	; (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003426:	fba0 1202 	umull	r1, r2, r0, r2
 800342a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800342c:	460a      	mov	r2, r1
 800342e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003432:	4413      	add	r3, r2
 8003434:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003438:	2200      	movs	r2, #0
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003446:	f7fd fadd 	bl	8000a04 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4613      	mov	r3, r2
 8003450:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003452:	e053      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	2200      	movs	r2, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	617a      	str	r2, [r7, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003466:	f04f 0b00 	mov.w	fp, #0
 800346a:	4652      	mov	r2, sl
 800346c:	465b      	mov	r3, fp
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	ebb2 080a 	subs.w	r8, r2, sl
 8003486:	eb63 090b 	sbc.w	r9, r3, fp
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800349a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800349e:	ebb2 0408 	subs.w	r4, r2, r8
 80034a2:	eb63 0509 	sbc.w	r5, r3, r9
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	00eb      	lsls	r3, r5, #3
 80034b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b4:	00e2      	lsls	r2, r4, #3
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	eb14 030a 	adds.w	r3, r4, sl
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	eb45 030b 	adc.w	r3, r5, fp
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034d2:	4629      	mov	r1, r5
 80034d4:	028b      	lsls	r3, r1, #10
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034dc:	4621      	mov	r1, r4
 80034de:	028a      	lsls	r2, r1, #10
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034e6:	2200      	movs	r2, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	f7fd fa88 	bl	8000a04 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	; (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800350c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800350e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003516:	e002      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800351c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003520:	4618      	mov	r0, r3
 8003522:	3740      	adds	r7, #64	; 0x40
 8003524:	46bd      	mov	sp, r7
 8003526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	00f42400 	.word	0x00f42400
 8003534:	017d7840 	.word	0x017d7840

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	20000004 	.word	0x20000004

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003554:	f7ff fff0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	; (8003570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	080065c0 	.word	0x080065c0

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800357c:	f7ff ffdc 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0b5b      	lsrs	r3, r3, #13
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	080065c0 	.word	0x080065c0

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e041      	b.n	8003636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fa54 	bl	8001a74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fda4 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b085      	sub	sp, #20
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e04e      	b.n	80036f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	68da      	ldr	r2, [r3, #12]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0201 	orr.w	r2, r2, #1
 800366e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a23      	ldr	r2, [pc, #140]	; (8003704 <HAL_TIM_Base_Start_IT+0xc4>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d01d      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <HAL_TIM_Base_Start_IT+0xc8>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a1e      	ldr	r2, [pc, #120]	; (800370c <HAL_TIM_Base_Start_IT+0xcc>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <HAL_TIM_Base_Start_IT+0xd0>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a1b      	ldr	r2, [pc, #108]	; (8003714 <HAL_TIM_Base_Start_IT+0xd4>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a19      	ldr	r2, [pc, #100]	; (8003718 <HAL_TIM_Base_Start_IT+0xd8>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_TIM_Base_Start_IT+0x80>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_TIM_Base_Start_IT+0xdc>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d111      	bne.n	80036e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 0307 	and.w	r3, r3, #7
 80036ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2b06      	cmp	r3, #6
 80036d0:	d010      	beq.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0201 	orr.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036e2:	e007      	b.n	80036f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f042 0201 	orr.w	r2, r2, #1
 80036f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40010000 	.word	0x40010000
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40010400 	.word	0x40010400
 8003718:	40014000 	.word	0x40014000
 800371c:	40001800 	.word	0x40001800

08003720 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b082      	sub	sp, #8
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e041      	b.n	80037b6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fe f92c 	bl	80019a4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2202      	movs	r2, #2
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f000 fce4 	bl	800412c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2201      	movs	r2, #1
 8003770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2201      	movs	r2, #1
 8003778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2201      	movs	r2, #1
 8003790:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}
	...

080037c0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d109      	bne.n	80037e4 <HAL_TIM_PWM_Start+0x24>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b01      	cmp	r3, #1
 80037da:	bf14      	ite	ne
 80037dc:	2301      	movne	r3, #1
 80037de:	2300      	moveq	r3, #0
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	e022      	b.n	800382a <HAL_TIM_PWM_Start+0x6a>
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	2b04      	cmp	r3, #4
 80037e8:	d109      	bne.n	80037fe <HAL_TIM_PWM_Start+0x3e>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	bf14      	ite	ne
 80037f6:	2301      	movne	r3, #1
 80037f8:	2300      	moveq	r3, #0
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	e015      	b.n	800382a <HAL_TIM_PWM_Start+0x6a>
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	2b08      	cmp	r3, #8
 8003802:	d109      	bne.n	8003818 <HAL_TIM_PWM_Start+0x58>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b01      	cmp	r3, #1
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e008      	b.n	800382a <HAL_TIM_PWM_Start+0x6a>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b01      	cmp	r3, #1
 8003822:	bf14      	ite	ne
 8003824:	2301      	movne	r3, #1
 8003826:	2300      	moveq	r3, #0
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d001      	beq.n	8003832 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800382e:	2301      	movs	r3, #1
 8003830:	e07c      	b.n	800392c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d104      	bne.n	8003842 <HAL_TIM_PWM_Start+0x82>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2202      	movs	r2, #2
 800383c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003840:	e013      	b.n	800386a <HAL_TIM_PWM_Start+0xaa>
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	2b04      	cmp	r3, #4
 8003846:	d104      	bne.n	8003852 <HAL_TIM_PWM_Start+0x92>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003850:	e00b      	b.n	800386a <HAL_TIM_PWM_Start+0xaa>
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	2b08      	cmp	r3, #8
 8003856:	d104      	bne.n	8003862 <HAL_TIM_PWM_Start+0xa2>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2202      	movs	r2, #2
 800385c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003860:	e003      	b.n	800386a <HAL_TIM_PWM_Start+0xaa>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2202      	movs	r2, #2
 8003866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2201      	movs	r2, #1
 8003870:	6839      	ldr	r1, [r7, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 ff44 	bl	8004700 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a2d      	ldr	r2, [pc, #180]	; (8003934 <HAL_TIM_PWM_Start+0x174>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d004      	beq.n	800388c <HAL_TIM_PWM_Start+0xcc>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <HAL_TIM_PWM_Start+0x178>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <HAL_TIM_PWM_Start+0xd0>
 800388c:	2301      	movs	r3, #1
 800388e:	e000      	b.n	8003892 <HAL_TIM_PWM_Start+0xd2>
 8003890:	2300      	movs	r3, #0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d007      	beq.n	80038a6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a22      	ldr	r2, [pc, #136]	; (8003934 <HAL_TIM_PWM_Start+0x174>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d022      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038b8:	d01d      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a1f      	ldr	r2, [pc, #124]	; (800393c <HAL_TIM_PWM_Start+0x17c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d018      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a1d      	ldr	r2, [pc, #116]	; (8003940 <HAL_TIM_PWM_Start+0x180>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d013      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a1c      	ldr	r2, [pc, #112]	; (8003944 <HAL_TIM_PWM_Start+0x184>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d00e      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a16      	ldr	r2, [pc, #88]	; (8003938 <HAL_TIM_PWM_Start+0x178>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d009      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a18      	ldr	r2, [pc, #96]	; (8003948 <HAL_TIM_PWM_Start+0x188>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d004      	beq.n	80038f6 <HAL_TIM_PWM_Start+0x136>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a16      	ldr	r2, [pc, #88]	; (800394c <HAL_TIM_PWM_Start+0x18c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d111      	bne.n	800391a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f003 0307 	and.w	r3, r3, #7
 8003900:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2b06      	cmp	r3, #6
 8003906:	d010      	beq.n	800392a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f042 0201 	orr.w	r2, r2, #1
 8003916:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003918:	e007      	b.n	800392a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f042 0201 	orr.w	r2, r2, #1
 8003928:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40010000 	.word	0x40010000
 8003938:	40010400 	.word	0x40010400
 800393c:	40000400 	.word	0x40000400
 8003940:	40000800 	.word	0x40000800
 8003944:	40000c00 	.word	0x40000c00
 8003948:	40014000 	.word	0x40014000
 800394c:	40001800 	.word	0x40001800

08003950 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b086      	sub	sp, #24
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003960:	2301      	movs	r3, #1
 8003962:	e097      	b.n	8003a94 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800396a:	b2db      	uxtb	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d106      	bne.n	800397e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f7fe f835 	bl	80019e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2202      	movs	r2, #2
 8003982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	6812      	ldr	r2, [r2, #0]
 8003990:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003994:	f023 0307 	bic.w	r3, r3, #7
 8003998:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3304      	adds	r3, #4
 80039a2:	4619      	mov	r1, r3
 80039a4:	4610      	mov	r0, r2
 80039a6:	f000 fbc1 	bl	800412c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	697a      	ldr	r2, [r7, #20]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689a      	ldr	r2, [r3, #8]
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	021b      	lsls	r3, r3, #8
 80039e2:	4313      	orrs	r3, r2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80039f0:	f023 030c 	bic.w	r3, r3, #12
 80039f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80039fc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a00:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	68da      	ldr	r2, [r3, #12]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	021b      	lsls	r3, r3, #8
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	693a      	ldr	r2, [r7, #16]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	691b      	ldr	r3, [r3, #16]
 8003a18:	011a      	lsls	r2, r3, #4
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	031b      	lsls	r3, r3, #12
 8003a20:	4313      	orrs	r3, r2
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4313      	orrs	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003a36:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685a      	ldr	r2, [r3, #4]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	695b      	ldr	r3, [r3, #20]
 8003a40:	011b      	lsls	r3, r3, #4
 8003a42:	4313      	orrs	r3, r2
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	697a      	ldr	r2, [r7, #20]
 8003a50:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3718      	adds	r7, #24
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003aac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ab4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003abc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003ac4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d110      	bne.n	8003aee <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003acc:	7bfb      	ldrb	r3, [r7, #15]
 8003ace:	2b01      	cmp	r3, #1
 8003ad0:	d102      	bne.n	8003ad8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003ad2:	7b7b      	ldrb	r3, [r7, #13]
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d001      	beq.n	8003adc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e069      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aec:	e031      	b.n	8003b52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b04      	cmp	r3, #4
 8003af2:	d110      	bne.n	8003b16 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003af4:	7bbb      	ldrb	r3, [r7, #14]
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d102      	bne.n	8003b00 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003afa:	7b3b      	ldrb	r3, [r7, #12]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d001      	beq.n	8003b04 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e055      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2202      	movs	r2, #2
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2202      	movs	r2, #2
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b14:	e01d      	b.n	8003b52 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b16:	7bfb      	ldrb	r3, [r7, #15]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d108      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b1c:	7bbb      	ldrb	r3, [r7, #14]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d105      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b22:	7b7b      	ldrb	r3, [r7, #13]
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d102      	bne.n	8003b2e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b28:	7b3b      	ldrb	r3, [r7, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e03e      	b.n	8003bb0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2202      	movs	r2, #2
 8003b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2202      	movs	r2, #2
 8003b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2202      	movs	r2, #2
 8003b4e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_TIM_Encoder_Start+0xc4>
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d008      	beq.n	8003b70 <HAL_TIM_Encoder_Start+0xd4>
 8003b5e:	e00f      	b.n	8003b80 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2201      	movs	r2, #1
 8003b66:	2100      	movs	r1, #0
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f000 fdc9 	bl	8004700 <TIM_CCxChannelCmd>
      break;
 8003b6e:	e016      	b.n	8003b9e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2201      	movs	r2, #1
 8003b76:	2104      	movs	r1, #4
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 fdc1 	bl	8004700 <TIM_CCxChannelCmd>
      break;
 8003b7e:	e00e      	b.n	8003b9e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2201      	movs	r2, #1
 8003b86:	2100      	movs	r1, #0
 8003b88:	4618      	mov	r0, r3
 8003b8a:	f000 fdb9 	bl	8004700 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	2104      	movs	r1, #4
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fdb2 	bl	8004700 <TIM_CCxChannelCmd>
      break;
 8003b9c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f042 0201 	orr.w	r2, r2, #1
 8003bac:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d122      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	f003 0302 	and.w	r3, r3, #2
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d11b      	bne.n	8003c14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f06f 0202 	mvn.w	r2, #2
 8003be4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2201      	movs	r2, #1
 8003bea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	699b      	ldr	r3, [r3, #24]
 8003bf2:	f003 0303 	and.w	r3, r3, #3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fa77 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003c00:	e005      	b.n	8003c0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 fa69 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 fa7a 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	691b      	ldr	r3, [r3, #16]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d122      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0304 	and.w	r3, r3, #4
 8003c2c:	2b04      	cmp	r3, #4
 8003c2e:	d11b      	bne.n	8003c68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f06f 0204 	mvn.w	r2, #4
 8003c38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2202      	movs	r2, #2
 8003c3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	699b      	ldr	r3, [r3, #24]
 8003c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d003      	beq.n	8003c56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f000 fa4d 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003c54:	e005      	b.n	8003c62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f000 fa3f 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa50 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	691b      	ldr	r3, [r3, #16]
 8003c6e:	f003 0308 	and.w	r3, r3, #8
 8003c72:	2b08      	cmp	r3, #8
 8003c74:	d122      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68db      	ldr	r3, [r3, #12]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	d11b      	bne.n	8003cbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f06f 0208 	mvn.w	r2, #8
 8003c8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2204      	movs	r2, #4
 8003c92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d003      	beq.n	8003caa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fa23 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003ca8:	e005      	b.n	8003cb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f000 fa15 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cb0:	6878      	ldr	r0, [r7, #4]
 8003cb2:	f000 fa26 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d122      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	f003 0310 	and.w	r3, r3, #16
 8003cd4:	2b10      	cmp	r3, #16
 8003cd6:	d11b      	bne.n	8003d10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f06f 0210 	mvn.w	r2, #16
 8003ce0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2208      	movs	r2, #8
 8003ce6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	69db      	ldr	r3, [r3, #28]
 8003cee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d003      	beq.n	8003cfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 f9f9 	bl	80040ee <HAL_TIM_IC_CaptureCallback>
 8003cfc:	e005      	b.n	8003d0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f9eb 	bl	80040da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f9fc 	bl	8004102 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f003 0301 	and.w	r3, r3, #1
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d10e      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	f003 0301 	and.w	r3, r3, #1
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d107      	bne.n	8003d3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f06f 0201 	mvn.w	r2, #1
 8003d34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7fd fc80 	bl	800163c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d46:	2b80      	cmp	r3, #128	; 0x80
 8003d48:	d10e      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d54:	2b80      	cmp	r3, #128	; 0x80
 8003d56:	d107      	bne.n	8003d68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003d60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fdca 	bl	80048fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d72:	2b40      	cmp	r3, #64	; 0x40
 8003d74:	d10e      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d80:	2b40      	cmp	r3, #64	; 0x40
 8003d82:	d107      	bne.n	8003d94 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003d8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f9c1 	bl	8004116 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b20      	cmp	r3, #32
 8003da0:	d10e      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	f003 0320 	and.w	r3, r3, #32
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d107      	bne.n	8003dc0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f06f 0220 	mvn.w	r2, #32
 8003db8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f000 fd94 	bl	80048e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d101      	bne.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003de2:	2302      	movs	r3, #2
 8003de4:	e0ae      	b.n	8003f44 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2201      	movs	r2, #1
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b0c      	cmp	r3, #12
 8003df2:	f200 809f 	bhi.w	8003f34 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003df6:	a201      	add	r2, pc, #4	; (adr r2, 8003dfc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e31 	.word	0x08003e31
 8003e00:	08003f35 	.word	0x08003f35
 8003e04:	08003f35 	.word	0x08003f35
 8003e08:	08003f35 	.word	0x08003f35
 8003e0c:	08003e71 	.word	0x08003e71
 8003e10:	08003f35 	.word	0x08003f35
 8003e14:	08003f35 	.word	0x08003f35
 8003e18:	08003f35 	.word	0x08003f35
 8003e1c:	08003eb3 	.word	0x08003eb3
 8003e20:	08003f35 	.word	0x08003f35
 8003e24:	08003f35 	.word	0x08003f35
 8003e28:	08003f35 	.word	0x08003f35
 8003e2c:	08003ef3 	.word	0x08003ef3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68b9      	ldr	r1, [r7, #8]
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fa18 	bl	800426c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	699a      	ldr	r2, [r3, #24]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f042 0208 	orr.w	r2, r2, #8
 8003e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699a      	ldr	r2, [r3, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0204 	bic.w	r2, r2, #4
 8003e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6999      	ldr	r1, [r3, #24]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	691a      	ldr	r2, [r3, #16]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	619a      	str	r2, [r3, #24]
      break;
 8003e6e:	e064      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 fa68 	bl	800434c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	021a      	lsls	r2, r3, #8
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	619a      	str	r2, [r3, #24]
      break;
 8003eb0:	e043      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68b9      	ldr	r1, [r7, #8]
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f000 fabd 	bl	8004438 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	69da      	ldr	r2, [r3, #28]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f042 0208 	orr.w	r2, r2, #8
 8003ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	69da      	ldr	r2, [r3, #28]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0204 	bic.w	r2, r2, #4
 8003edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	69d9      	ldr	r1, [r3, #28]
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	61da      	str	r2, [r3, #28]
      break;
 8003ef0:	e023      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 fb11 	bl	8004520 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691b      	ldr	r3, [r3, #16]
 8003f28:	021a      	lsls	r2, r3, #8
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	61da      	str	r2, [r3, #28]
      break;
 8003f32:	e002      	b.n	8003f3a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	75fb      	strb	r3, [r7, #23]
      break;
 8003f38:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f42:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f56:	2300      	movs	r3, #0
 8003f58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_TIM_ConfigClockSource+0x1c>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0b4      	b.n	80040d2 <HAL_TIM_ConfigClockSource+0x186>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2202      	movs	r2, #2
 8003f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa0:	d03e      	beq.n	8004020 <HAL_TIM_ConfigClockSource+0xd4>
 8003fa2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa6:	f200 8087 	bhi.w	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003faa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fae:	f000 8086 	beq.w	80040be <HAL_TIM_ConfigClockSource+0x172>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb6:	d87f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fb8:	2b70      	cmp	r3, #112	; 0x70
 8003fba:	d01a      	beq.n	8003ff2 <HAL_TIM_ConfigClockSource+0xa6>
 8003fbc:	2b70      	cmp	r3, #112	; 0x70
 8003fbe:	d87b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc0:	2b60      	cmp	r3, #96	; 0x60
 8003fc2:	d050      	beq.n	8004066 <HAL_TIM_ConfigClockSource+0x11a>
 8003fc4:	2b60      	cmp	r3, #96	; 0x60
 8003fc6:	d877      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fc8:	2b50      	cmp	r3, #80	; 0x50
 8003fca:	d03c      	beq.n	8004046 <HAL_TIM_ConfigClockSource+0xfa>
 8003fcc:	2b50      	cmp	r3, #80	; 0x50
 8003fce:	d873      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd0:	2b40      	cmp	r3, #64	; 0x40
 8003fd2:	d058      	beq.n	8004086 <HAL_TIM_ConfigClockSource+0x13a>
 8003fd4:	2b40      	cmp	r3, #64	; 0x40
 8003fd6:	d86f      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fd8:	2b30      	cmp	r3, #48	; 0x30
 8003fda:	d064      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fdc:	2b30      	cmp	r3, #48	; 0x30
 8003fde:	d86b      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe0:	2b20      	cmp	r3, #32
 8003fe2:	d060      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	d867      	bhi.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d05c      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003fec:	2b10      	cmp	r3, #16
 8003fee:	d05a      	beq.n	80040a6 <HAL_TIM_ConfigClockSource+0x15a>
 8003ff0:	e062      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6818      	ldr	r0, [r3, #0]
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	6899      	ldr	r1, [r3, #8]
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f000 fb5d 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004014:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	68ba      	ldr	r2, [r7, #8]
 800401c:	609a      	str	r2, [r3, #8]
      break;
 800401e:	e04f      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	6899      	ldr	r1, [r3, #8]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	f000 fb46 	bl	80046c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	689a      	ldr	r2, [r3, #8]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004042:	609a      	str	r2, [r3, #8]
      break;
 8004044:	e03c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6818      	ldr	r0, [r3, #0]
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	6859      	ldr	r1, [r3, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	461a      	mov	r2, r3
 8004054:	f000 faba 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	2150      	movs	r1, #80	; 0x50
 800405e:	4618      	mov	r0, r3
 8004060:	f000 fb13 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8004064:	e02c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6818      	ldr	r0, [r3, #0]
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6859      	ldr	r1, [r3, #4]
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	461a      	mov	r2, r3
 8004074:	f000 fad9 	bl	800462a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2160      	movs	r1, #96	; 0x60
 800407e:	4618      	mov	r0, r3
 8004080:	f000 fb03 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 8004084:	e01c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6818      	ldr	r0, [r3, #0]
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	6859      	ldr	r1, [r3, #4]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	461a      	mov	r2, r3
 8004094:	f000 fa9a 	bl	80045cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2140      	movs	r1, #64	; 0x40
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 faf3 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 80040a4:	e00c      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681a      	ldr	r2, [r3, #0]
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4619      	mov	r1, r3
 80040b0:	4610      	mov	r0, r2
 80040b2:	f000 faea 	bl	800468a <TIM_ITRx_SetConfig>
      break;
 80040b6:	e003      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	73fb      	strb	r3, [r7, #15]
      break;
 80040bc:	e000      	b.n	80040c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80040be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80040d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}

080040da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040da:	b480      	push	{r7}
 80040dc:	b083      	sub	sp, #12
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040e2:	bf00      	nop
 80040e4:	370c      	adds	r7, #12
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr

080040ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040ee:	b480      	push	{r7}
 80040f0:	b083      	sub	sp, #12
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040f6:	bf00      	nop
 80040f8:	370c      	adds	r7, #12
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800410a:	bf00      	nop
 800410c:	370c      	adds	r7, #12
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004116:	b480      	push	{r7}
 8004118:	b083      	sub	sp, #12
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
	...

0800412c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800412c:	b480      	push	{r7}
 800412e:	b085      	sub	sp, #20
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a40      	ldr	r2, [pc, #256]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d013      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800414a:	d00f      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a3d      	ldr	r2, [pc, #244]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d00b      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a3c      	ldr	r2, [pc, #240]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d007      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a3b      	ldr	r2, [pc, #236]	; (800424c <TIM_Base_SetConfig+0x120>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_Base_SetConfig+0x40>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a3a      	ldr	r2, [pc, #232]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d108      	bne.n	800417e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	4313      	orrs	r3, r2
 800417c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a2f      	ldr	r2, [pc, #188]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d02b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418c:	d027      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a2c      	ldr	r2, [pc, #176]	; (8004244 <TIM_Base_SetConfig+0x118>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d023      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a2b      	ldr	r2, [pc, #172]	; (8004248 <TIM_Base_SetConfig+0x11c>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a2a      	ldr	r2, [pc, #168]	; (800424c <TIM_Base_SetConfig+0x120>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d01b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a29      	ldr	r2, [pc, #164]	; (8004250 <TIM_Base_SetConfig+0x124>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d017      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a28      	ldr	r2, [pc, #160]	; (8004254 <TIM_Base_SetConfig+0x128>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d013      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a27      	ldr	r2, [pc, #156]	; (8004258 <TIM_Base_SetConfig+0x12c>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00f      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a26      	ldr	r2, [pc, #152]	; (800425c <TIM_Base_SetConfig+0x130>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d00b      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	4a25      	ldr	r2, [pc, #148]	; (8004260 <TIM_Base_SetConfig+0x134>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d007      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	4a24      	ldr	r2, [pc, #144]	; (8004264 <TIM_Base_SetConfig+0x138>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d003      	beq.n	80041de <TIM_Base_SetConfig+0xb2>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a23      	ldr	r2, [pc, #140]	; (8004268 <TIM_Base_SetConfig+0x13c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d108      	bne.n	80041f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68db      	ldr	r3, [r3, #12]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	689a      	ldr	r2, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a0a      	ldr	r2, [pc, #40]	; (8004240 <TIM_Base_SetConfig+0x114>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0xf8>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a0c      	ldr	r2, [pc, #48]	; (8004250 <TIM_Base_SetConfig+0x124>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d103      	bne.n	800422c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2201      	movs	r2, #1
 8004230:	615a      	str	r2, [r3, #20]
}
 8004232:	bf00      	nop
 8004234:	3714      	adds	r7, #20
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	40010000 	.word	0x40010000
 8004244:	40000400 	.word	0x40000400
 8004248:	40000800 	.word	0x40000800
 800424c:	40000c00 	.word	0x40000c00
 8004250:	40010400 	.word	0x40010400
 8004254:	40014000 	.word	0x40014000
 8004258:	40014400 	.word	0x40014400
 800425c:	40014800 	.word	0x40014800
 8004260:	40001800 	.word	0x40001800
 8004264:	40001c00 	.word	0x40001c00
 8004268:	40002000 	.word	0x40002000

0800426c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a1b      	ldr	r3, [r3, #32]
 800427a:	f023 0201 	bic.w	r2, r3, #1
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f023 0303 	bic.w	r3, r3, #3
 80042a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68fa      	ldr	r2, [r7, #12]
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	f023 0302 	bic.w	r3, r3, #2
 80042b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	697a      	ldr	r2, [r7, #20]
 80042bc:	4313      	orrs	r3, r2
 80042be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a20      	ldr	r2, [pc, #128]	; (8004344 <TIM_OC1_SetConfig+0xd8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC1_SetConfig+0x64>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a1f      	ldr	r2, [pc, #124]	; (8004348 <TIM_OC1_SetConfig+0xdc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d10c      	bne.n	80042ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f023 0308 	bic.w	r3, r3, #8
 80042d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	4313      	orrs	r3, r2
 80042e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f023 0304 	bic.w	r3, r3, #4
 80042e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a15      	ldr	r2, [pc, #84]	; (8004344 <TIM_OC1_SetConfig+0xd8>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d003      	beq.n	80042fa <TIM_OC1_SetConfig+0x8e>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a14      	ldr	r2, [pc, #80]	; (8004348 <TIM_OC1_SetConfig+0xdc>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004300:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004308:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	693a      	ldr	r2, [r7, #16]
 8004310:	4313      	orrs	r3, r2
 8004312:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	697a      	ldr	r2, [r7, #20]
 8004336:	621a      	str	r2, [r3, #32]
}
 8004338:	bf00      	nop
 800433a:	371c      	adds	r7, #28
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40010000 	.word	0x40010000
 8004348:	40010400 	.word	0x40010400

0800434c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800434c:	b480      	push	{r7}
 800434e:	b087      	sub	sp, #28
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	f023 0210 	bic.w	r2, r3, #16
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	4313      	orrs	r3, r2
 800438e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f023 0320 	bic.w	r3, r3, #32
 8004396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a22      	ldr	r2, [pc, #136]	; (8004430 <TIM_OC2_SetConfig+0xe4>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d003      	beq.n	80043b4 <TIM_OC2_SetConfig+0x68>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a21      	ldr	r2, [pc, #132]	; (8004434 <TIM_OC2_SetConfig+0xe8>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d10d      	bne.n	80043d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	011b      	lsls	r3, r3, #4
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a17      	ldr	r2, [pc, #92]	; (8004430 <TIM_OC2_SetConfig+0xe4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d003      	beq.n	80043e0 <TIM_OC2_SetConfig+0x94>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a16      	ldr	r2, [pc, #88]	; (8004434 <TIM_OC2_SetConfig+0xe8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d113      	bne.n	8004408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	695b      	ldr	r3, [r3, #20]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	699b      	ldr	r3, [r3, #24]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	693a      	ldr	r2, [r7, #16]
 8004404:	4313      	orrs	r3, r2
 8004406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	693a      	ldr	r2, [r7, #16]
 800440c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	621a      	str	r2, [r3, #32]
}
 8004422:	bf00      	nop
 8004424:	371c      	adds	r7, #28
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr
 800442e:	bf00      	nop
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400

08004438 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004438:	b480      	push	{r7}
 800443a:	b087      	sub	sp, #28
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	69db      	ldr	r3, [r3, #28]
 800445e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004466:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004480:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	021b      	lsls	r3, r3, #8
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <TIM_OC3_SetConfig+0xe0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d003      	beq.n	800449e <TIM_OC3_SetConfig+0x66>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <TIM_OC3_SetConfig+0xe4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10d      	bne.n	80044ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	021b      	lsls	r3, r3, #8
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80044b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a16      	ldr	r2, [pc, #88]	; (8004518 <TIM_OC3_SetConfig+0xe0>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d003      	beq.n	80044ca <TIM_OC3_SetConfig+0x92>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a15      	ldr	r2, [pc, #84]	; (800451c <TIM_OC3_SetConfig+0xe4>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d113      	bne.n	80044f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80044d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	695b      	ldr	r3, [r3, #20]
 80044de:	011b      	lsls	r3, r3, #4
 80044e0:	693a      	ldr	r2, [r7, #16]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	685a      	ldr	r2, [r3, #4]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	621a      	str	r2, [r3, #32]
}
 800450c:	bf00      	nop
 800450e:	371c      	adds	r7, #28
 8004510:	46bd      	mov	sp, r7
 8004512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004516:	4770      	bx	lr
 8004518:	40010000 	.word	0x40010000
 800451c:	40010400 	.word	0x40010400

08004520 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a1b      	ldr	r3, [r3, #32]
 800452e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69db      	ldr	r3, [r3, #28]
 8004546:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800454e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004556:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	021b      	lsls	r3, r3, #8
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	4313      	orrs	r3, r2
 8004562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800456a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	689b      	ldr	r3, [r3, #8]
 8004570:	031b      	lsls	r3, r3, #12
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	4313      	orrs	r3, r2
 8004576:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a12      	ldr	r2, [pc, #72]	; (80045c4 <TIM_OC4_SetConfig+0xa4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <TIM_OC4_SetConfig+0x68>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a11      	ldr	r2, [pc, #68]	; (80045c8 <TIM_OC4_SetConfig+0xa8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d109      	bne.n	800459c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800458e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	621a      	str	r2, [r3, #32]
}
 80045b6:	bf00      	nop
 80045b8:	371c      	adds	r7, #28
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010400 	.word	0x40010400

080045cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b087      	sub	sp, #28
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	60f8      	str	r0, [r7, #12]
 80045d4:	60b9      	str	r1, [r7, #8]
 80045d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f023 0201 	bic.w	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	011b      	lsls	r3, r3, #4
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	4313      	orrs	r3, r2
 8004600:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	f023 030a 	bic.w	r3, r3, #10
 8004608:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	4313      	orrs	r3, r2
 8004610:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	621a      	str	r2, [r3, #32]
}
 800461e:	bf00      	nop
 8004620:	371c      	adds	r7, #28
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr

0800462a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800462a:	b480      	push	{r7}
 800462c:	b087      	sub	sp, #28
 800462e:	af00      	add	r7, sp, #0
 8004630:	60f8      	str	r0, [r7, #12]
 8004632:	60b9      	str	r1, [r7, #8]
 8004634:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6a1b      	ldr	r3, [r3, #32]
 800463a:	f023 0210 	bic.w	r2, r3, #16
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004654:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	031b      	lsls	r3, r3, #12
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004666:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	011b      	lsls	r3, r3, #4
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4313      	orrs	r3, r2
 8004670:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	693a      	ldr	r2, [r7, #16]
 800467c:	621a      	str	r2, [r3, #32]
}
 800467e:	bf00      	nop
 8004680:	371c      	adds	r7, #28
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800468a:	b480      	push	{r7}
 800468c:	b085      	sub	sp, #20
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046a2:	683a      	ldr	r2, [r7, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	f043 0307 	orr.w	r3, r3, #7
 80046ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	68fa      	ldr	r2, [r7, #12]
 80046b2:	609a      	str	r2, [r3, #8]
}
 80046b4:	bf00      	nop
 80046b6:	3714      	adds	r7, #20
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b087      	sub	sp, #28
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	60f8      	str	r0, [r7, #12]
 80046c8:	60b9      	str	r1, [r7, #8]
 80046ca:	607a      	str	r2, [r7, #4]
 80046cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80046da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	021a      	lsls	r2, r3, #8
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	431a      	orrs	r2, r3
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	371c      	adds	r7, #28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	f003 031f 	and.w	r3, r3, #31
 8004712:	2201      	movs	r2, #1
 8004714:	fa02 f303 	lsl.w	r3, r2, r3
 8004718:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	6a1a      	ldr	r2, [r3, #32]
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	43db      	mvns	r3, r3
 8004722:	401a      	ands	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	6a1a      	ldr	r2, [r3, #32]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f003 031f 	and.w	r3, r3, #31
 8004732:	6879      	ldr	r1, [r7, #4]
 8004734:	fa01 f303 	lsl.w	r3, r1, r3
 8004738:	431a      	orrs	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
}
 800473e:	bf00      	nop
 8004740:	371c      	adds	r7, #28
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
	...

0800474c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
 8004754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004760:	2302      	movs	r3, #2
 8004762:	e05a      	b.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	689b      	ldr	r3, [r3, #8]
 8004782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68fa      	ldr	r2, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a21      	ldr	r2, [pc, #132]	; (8004828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d022      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047b0:	d01d      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1d      	ldr	r2, [pc, #116]	; (800482c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d018      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a1b      	ldr	r2, [pc, #108]	; (8004830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d013      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a1a      	ldr	r2, [pc, #104]	; (8004834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d00e      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d009      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a17      	ldr	r2, [pc, #92]	; (800483c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d004      	beq.n	80047ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a15      	ldr	r2, [pc, #84]	; (8004840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d10c      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3714      	adds	r7, #20
 800481e:	46bd      	mov	sp, r7
 8004820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004824:	4770      	bx	lr
 8004826:	bf00      	nop
 8004828:	40010000 	.word	0x40010000
 800482c:	40000400 	.word	0x40000400
 8004830:	40000800 	.word	0x40000800
 8004834:	40000c00 	.word	0x40000c00
 8004838:	40010400 	.word	0x40010400
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800

08004844 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004844:	b480      	push	{r7}
 8004846:	b085      	sub	sp, #20
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004858:	2b01      	cmp	r3, #1
 800485a:	d101      	bne.n	8004860 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800485c:	2302      	movs	r3, #2
 800485e:	e03d      	b.n	80048dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	4313      	orrs	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	4313      	orrs	r3, r2
 8004882:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	4313      	orrs	r3, r2
 8004890:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4313      	orrs	r3, r2
 800489e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d101      	bne.n	8004922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800491e:	2301      	movs	r3, #1
 8004920:	e03f      	b.n	80049a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004928:	b2db      	uxtb	r3, r3
 800492a:	2b00      	cmp	r3, #0
 800492c:	d106      	bne.n	800493c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd f8fe 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2224      	movs	r2, #36	; 0x24
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68da      	ldr	r2, [r3, #12]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004952:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 fe35 	bl	80055c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004968:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695a      	ldr	r2, [r3, #20]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004978:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68da      	ldr	r2, [r3, #12]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004988:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3708      	adds	r7, #8
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b084      	sub	sp, #16
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	60f8      	str	r0, [r7, #12]
 80049b2:	60b9      	str	r1, [r7, #8]
 80049b4:	4613      	mov	r3, r2
 80049b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b20      	cmp	r3, #32
 80049c2:	d11d      	bne.n	8004a00 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d002      	beq.n	80049d0 <HAL_UART_Receive_IT+0x26>
 80049ca:	88fb      	ldrh	r3, [r7, #6]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d101      	bne.n	80049d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049d0:	2301      	movs	r3, #1
 80049d2:	e016      	b.n	8004a02 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d101      	bne.n	80049e2 <HAL_UART_Receive_IT+0x38>
 80049de:	2302      	movs	r3, #2
 80049e0:	e00f      	b.n	8004a02 <HAL_UART_Receive_IT+0x58>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80049f0:	88fb      	ldrh	r3, [r7, #6]
 80049f2:	461a      	mov	r2, r3
 80049f4:	68b9      	ldr	r1, [r7, #8]
 80049f6:	68f8      	ldr	r0, [r7, #12]
 80049f8:	f000 fbe3 	bl	80051c2 <UART_Start_Receive_IT>
 80049fc:	4603      	mov	r3, r0
 80049fe:	e000      	b.n	8004a02 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004a00:	2302      	movs	r3, #2
  }
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3710      	adds	r7, #16
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
	...

08004a0c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	b08c      	sub	sp, #48	; 0x30
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	60b9      	str	r1, [r7, #8]
 8004a16:	4613      	mov	r3, r2
 8004a18:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	d165      	bne.n	8004af2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d002      	beq.n	8004a32 <HAL_UART_Transmit_DMA+0x26>
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e05e      	b.n	8004af4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Transmit_DMA+0x38>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e057      	b.n	8004af4 <HAL_UART_Transmit_DMA+0xe8>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	88fa      	ldrh	r2, [r7, #6]
 8004a56:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	88fa      	ldrh	r2, [r7, #6]
 8004a5c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2221      	movs	r2, #33	; 0x21
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a70:	4a22      	ldr	r2, [pc, #136]	; (8004afc <HAL_UART_Transmit_DMA+0xf0>)
 8004a72:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a78:	4a21      	ldr	r2, [pc, #132]	; (8004b00 <HAL_UART_Transmit_DMA+0xf4>)
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a80:	4a20      	ldr	r2, [pc, #128]	; (8004b04 <HAL_UART_Transmit_DMA+0xf8>)
 8004a82:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a88:	2200      	movs	r2, #0
 8004a8a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8004a8c:	f107 0308 	add.w	r3, r7, #8
 8004a90:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8004a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a98:	6819      	ldr	r1, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	3304      	adds	r3, #4
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	f7fd fc1a 	bl	80022dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ab0:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	3314      	adds	r3, #20
 8004ac0:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	617b      	str	r3, [r7, #20]
   return(result);
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ad0:	62bb      	str	r3, [r7, #40]	; 0x28
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	3314      	adds	r3, #20
 8004ad8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ada:	627a      	str	r2, [r7, #36]	; 0x24
 8004adc:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ade:	6a39      	ldr	r1, [r7, #32]
 8004ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ae2:	e841 2300 	strex	r3, r2, [r1]
 8004ae6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ae8:	69fb      	ldr	r3, [r7, #28]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1e5      	bne.n	8004aba <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	e000      	b.n	8004af4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8004af2:	2302      	movs	r3, #2
  }
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	3730      	adds	r7, #48	; 0x30
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}
 8004afc:	08005079 	.word	0x08005079
 8004b00:	08005113 	.word	0x08005113
 8004b04:	0800512f 	.word	0x0800512f

08004b08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b0ba      	sub	sp, #232	; 0xe8
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b3e:	f003 030f 	and.w	r3, r3, #15
 8004b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004b46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d10f      	bne.n	8004b6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b52:	f003 0320 	and.w	r3, r3, #32
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_UART_IRQHandler+0x66>
 8004b5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b5e:	f003 0320 	and.w	r3, r3, #32
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 fc70 	bl	800544c <UART_Receive_IT>
      return;
 8004b6c:	e256      	b.n	800501c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f000 80de 	beq.w	8004d34 <HAL_UART_IRQHandler+0x22c>
 8004b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d106      	bne.n	8004b92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	f000 80d1 	beq.w	8004d34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00b      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xae>
 8004b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0201 	orr.w	r2, r3, #1
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bba:	f003 0304 	and.w	r3, r3, #4
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00b      	beq.n	8004bda <HAL_UART_IRQHandler+0xd2>
 8004bc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bc6:	f003 0301 	and.w	r3, r3, #1
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f043 0202 	orr.w	r2, r3, #2
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bde:	f003 0302 	and.w	r3, r3, #2
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00b      	beq.n	8004bfe <HAL_UART_IRQHandler+0xf6>
 8004be6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bea:	f003 0301 	and.w	r3, r3, #1
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d005      	beq.n	8004bfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bf6:	f043 0204 	orr.w	r2, r3, #4
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c02:	f003 0308 	and.w	r3, r3, #8
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d011      	beq.n	8004c2e <HAL_UART_IRQHandler+0x126>
 8004c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c0e:	f003 0320 	and.w	r3, r3, #32
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d105      	bne.n	8004c22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004c16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d005      	beq.n	8004c2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c26:	f043 0208 	orr.w	r2, r3, #8
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 81ed 	beq.w	8005012 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3c:	f003 0320 	and.w	r3, r3, #32
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d008      	beq.n	8004c56 <HAL_UART_IRQHandler+0x14e>
 8004c44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d002      	beq.n	8004c56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fbfb 	bl	800544c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	695b      	ldr	r3, [r3, #20]
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b40      	cmp	r3, #64	; 0x40
 8004c62:	bf0c      	ite	eq
 8004c64:	2301      	moveq	r3, #1
 8004c66:	2300      	movne	r3, #0
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f003 0308 	and.w	r3, r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <HAL_UART_IRQHandler+0x17a>
 8004c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d04f      	beq.n	8004d22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fb03 	bl	800528e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	695b      	ldr	r3, [r3, #20]
 8004c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c92:	2b40      	cmp	r3, #64	; 0x40
 8004c94:	d141      	bne.n	8004d1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3314      	adds	r3, #20
 8004cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004cd2:	e841 2300 	strex	r3, r2, [r1]
 8004cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1d9      	bne.n	8004c96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d013      	beq.n	8004d12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cee:	4a7d      	ldr	r2, [pc, #500]	; (8004ee4 <HAL_UART_IRQHandler+0x3dc>)
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f7fd fbb8 	bl	800246c <HAL_DMA_Abort_IT>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d016      	beq.n	8004d30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d0c:	4610      	mov	r0, r2
 8004d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d10:	e00e      	b.n	8004d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f99a 	bl	800504c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	e00a      	b.n	8004d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f996 	bl	800504c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d20:	e006      	b.n	8004d30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f000 f992 	bl	800504c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004d2e:	e170      	b.n	8005012 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d30:	bf00      	nop
    return;
 8004d32:	e16e      	b.n	8005012 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	f040 814a 	bne.w	8004fd2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d42:	f003 0310 	and.w	r3, r3, #16
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f000 8143 	beq.w	8004fd2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d50:	f003 0310 	and.w	r3, r3, #16
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	f000 813c 	beq.w	8004fd2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	60bb      	str	r3, [r7, #8]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60bb      	str	r3, [r7, #8]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	60bb      	str	r3, [r7, #8]
 8004d6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	f040 80b4 	bne.w	8004ee8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 8140 	beq.w	8005016 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	f080 8139 	bcs.w	8005016 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004daa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004db6:	f000 8088 	beq.w	8004eca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	330c      	adds	r3, #12
 8004dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d1d9      	bne.n	8004dba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3314      	adds	r3, #20
 8004e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e10:	e853 3f00 	ldrex	r3, [r3]
 8004e14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e18:	f023 0301 	bic.w	r3, r3, #1
 8004e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3314      	adds	r3, #20
 8004e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004e2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004e36:	e841 2300 	strex	r3, r2, [r1]
 8004e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1e1      	bne.n	8004e06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	3314      	adds	r3, #20
 8004e48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004e4c:	e853 3f00 	ldrex	r3, [r3]
 8004e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e3      	bne.n	8004e42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e92:	e853 3f00 	ldrex	r3, [r3]
 8004e96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9a:	f023 0310 	bic.w	r3, r3, #16
 8004e9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	330c      	adds	r3, #12
 8004ea8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004eac:	65ba      	str	r2, [r7, #88]	; 0x58
 8004eae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004eb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004eb4:	e841 2300 	strex	r3, r2, [r1]
 8004eb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004eba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d1e3      	bne.n	8004e88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd fa61 	bl	800238c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	1ad3      	subs	r3, r2, r3
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	4619      	mov	r1, r3
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f8c0 	bl	8005060 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ee0:	e099      	b.n	8005016 <HAL_UART_IRQHandler+0x50e>
 8004ee2:	bf00      	nop
 8004ee4:	08005355 	.word	0x08005355
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f000 808b 	beq.w	800501a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	f000 8086 	beq.w	800501a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004f32:	647a      	str	r2, [r7, #68]	; 0x44
 8004f34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f3a:	e841 2300 	strex	r3, r2, [r1]
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d1e3      	bne.n	8004f0e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	3314      	adds	r3, #20
 8004f4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f50:	e853 3f00 	ldrex	r3, [r3]
 8004f54:	623b      	str	r3, [r7, #32]
   return(result);
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f023 0301 	bic.w	r3, r3, #1
 8004f5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3314      	adds	r3, #20
 8004f66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004f6a:	633a      	str	r2, [r7, #48]	; 0x30
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f72:	e841 2300 	strex	r3, r2, [r1]
 8004f76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d1e3      	bne.n	8004f46 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	330c      	adds	r3, #12
 8004f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	e853 3f00 	ldrex	r3, [r3]
 8004f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f023 0310 	bic.w	r3, r3, #16
 8004fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	330c      	adds	r3, #12
 8004fac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004fb0:	61fa      	str	r2, [r7, #28]
 8004fb2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	69b9      	ldr	r1, [r7, #24]
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e3      	bne.n	8004f8c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f000 f848 	bl	8005060 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fd0:	e023      	b.n	800501a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x4ea>
 8004fde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fe2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d003      	beq.n	8004ff2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 f9c6 	bl	800537c <UART_Transmit_IT>
    return;
 8004ff0:	e014      	b.n	800501c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00e      	beq.n	800501c <HAL_UART_IRQHandler+0x514>
 8004ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005006:	2b00      	cmp	r3, #0
 8005008:	d008      	beq.n	800501c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 fa06 	bl	800541c <UART_EndTransmit_IT>
    return;
 8005010:	e004      	b.n	800501c <HAL_UART_IRQHandler+0x514>
    return;
 8005012:	bf00      	nop
 8005014:	e002      	b.n	800501c <HAL_UART_IRQHandler+0x514>
      return;
 8005016:	bf00      	nop
 8005018:	e000      	b.n	800501c <HAL_UART_IRQHandler+0x514>
      return;
 800501a:	bf00      	nop
  }
}
 800501c:	37e8      	adds	r7, #232	; 0xe8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}
 8005022:	bf00      	nop

08005024 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005024:	b480      	push	{r7}
 8005026:	b083      	sub	sp, #12
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800502c:	bf00      	nop
 800502e:	370c      	adds	r7, #12
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr

08005038 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005038:	b480      	push	{r7}
 800503a:	b083      	sub	sp, #12
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005040:	bf00      	nop
 8005042:	370c      	adds	r7, #12
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	460b      	mov	r3, r1
 800506a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b090      	sub	sp, #64	; 0x40
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005090:	2b00      	cmp	r3, #0
 8005092:	d137      	bne.n	8005104 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005094:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005096:	2200      	movs	r2, #0
 8005098:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800509a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3314      	adds	r3, #20
 80050a0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a4:	e853 3f00 	ldrex	r3, [r3]
 80050a8:	623b      	str	r3, [r7, #32]
   return(result);
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050b0:	63bb      	str	r3, [r7, #56]	; 0x38
 80050b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	3314      	adds	r3, #20
 80050b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80050ba:	633a      	str	r2, [r7, #48]	; 0x30
 80050bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050c2:	e841 2300 	strex	r3, r2, [r1]
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1e5      	bne.n	800509a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80050ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	330c      	adds	r3, #12
 80050d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	e853 3f00 	ldrex	r3, [r3]
 80050dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e4:	637b      	str	r3, [r7, #52]	; 0x34
 80050e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	330c      	adds	r3, #12
 80050ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050ee:	61fa      	str	r2, [r7, #28]
 80050f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f2:	69b9      	ldr	r1, [r7, #24]
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	e841 2300 	strex	r3, r2, [r1]
 80050fa:	617b      	str	r3, [r7, #20]
   return(result);
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d1e5      	bne.n	80050ce <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005102:	e002      	b.n	800510a <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005104:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005106:	f7ff ff8d 	bl	8005024 <HAL_UART_TxCpltCallback>
}
 800510a:	bf00      	nop
 800510c:	3740      	adds	r7, #64	; 0x40
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}

08005112 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005112:	b580      	push	{r7, lr}
 8005114:	b084      	sub	sp, #16
 8005116:	af00      	add	r7, sp, #0
 8005118:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005120:	68f8      	ldr	r0, [r7, #12]
 8005122:	f7ff ff89 	bl	8005038 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005126:	bf00      	nop
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800512e:	b580      	push	{r7, lr}
 8005130:	b084      	sub	sp, #16
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800513e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	bf0c      	ite	eq
 800514e:	2301      	moveq	r3, #1
 8005150:	2300      	movne	r3, #0
 8005152:	b2db      	uxtb	r3, r3
 8005154:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b21      	cmp	r3, #33	; 0x21
 8005160:	d108      	bne.n	8005174 <UART_DMAError+0x46>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d005      	beq.n	8005174 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	2200      	movs	r2, #0
 800516c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800516e:	68b8      	ldr	r0, [r7, #8]
 8005170:	f000 f865 	bl	800523e <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800517e:	2b40      	cmp	r3, #64	; 0x40
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005190:	b2db      	uxtb	r3, r3
 8005192:	2b22      	cmp	r3, #34	; 0x22
 8005194:	d108      	bne.n	80051a8 <UART_DMAError+0x7a>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	2200      	movs	r2, #0
 80051a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80051a2:	68b8      	ldr	r0, [r7, #8]
 80051a4:	f000 f873 	bl	800528e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ac:	f043 0210 	orr.w	r2, r3, #16
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051b4:	68b8      	ldr	r0, [r7, #8]
 80051b6:	f7ff ff49 	bl	800504c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ba:	bf00      	nop
 80051bc:	3710      	adds	r7, #16
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	60f8      	str	r0, [r7, #12]
 80051ca:	60b9      	str	r1, [r7, #8]
 80051cc:	4613      	mov	r3, r2
 80051ce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	88fa      	ldrh	r2, [r7, #6]
 80051da:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	88fa      	ldrh	r2, [r7, #6]
 80051e0:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	2222      	movs	r2, #34	; 0x22
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	691b      	ldr	r3, [r3, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d007      	beq.n	8005210 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68da      	ldr	r2, [r3, #12]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800520e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	695a      	ldr	r2, [r3, #20]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f042 0201 	orr.w	r2, r2, #1
 800521e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	68da      	ldr	r2, [r3, #12]
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0220 	orr.w	r2, r2, #32
 800522e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800523e:	b480      	push	{r7}
 8005240:	b089      	sub	sp, #36	; 0x24
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	330c      	adds	r3, #12
 800524c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	e853 3f00 	ldrex	r3, [r3]
 8005254:	60bb      	str	r3, [r7, #8]
   return(result);
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800525c:	61fb      	str	r3, [r7, #28]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	330c      	adds	r3, #12
 8005264:	69fa      	ldr	r2, [r7, #28]
 8005266:	61ba      	str	r2, [r7, #24]
 8005268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800526a:	6979      	ldr	r1, [r7, #20]
 800526c:	69ba      	ldr	r2, [r7, #24]
 800526e:	e841 2300 	strex	r3, r2, [r1]
 8005272:	613b      	str	r3, [r7, #16]
   return(result);
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e5      	bne.n	8005246 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005282:	bf00      	nop
 8005284:	3724      	adds	r7, #36	; 0x24
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr

0800528e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800528e:	b480      	push	{r7}
 8005290:	b095      	sub	sp, #84	; 0x54
 8005292:	af00      	add	r7, sp, #0
 8005294:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	330c      	adds	r3, #12
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	330c      	adds	r3, #12
 80052b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b6:	643a      	str	r2, [r7, #64]	; 0x40
 80052b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e5      	bne.n	8005296 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3314      	adds	r3, #20
 80052d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3314      	adds	r3, #20
 80052e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005302:	2b01      	cmp	r3, #1
 8005304:	d119      	bne.n	800533a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	e853 3f00 	ldrex	r3, [r3]
 8005314:	60bb      	str	r3, [r7, #8]
   return(result);
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	f023 0310 	bic.w	r3, r3, #16
 800531c:	647b      	str	r3, [r7, #68]	; 0x44
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	330c      	adds	r3, #12
 8005324:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005326:	61ba      	str	r2, [r7, #24]
 8005328:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532a:	6979      	ldr	r1, [r7, #20]
 800532c:	69ba      	ldr	r2, [r7, #24]
 800532e:	e841 2300 	strex	r3, r2, [r1]
 8005332:	613b      	str	r3, [r7, #16]
   return(result);
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1e5      	bne.n	8005306 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005348:	bf00      	nop
 800534a:	3754      	adds	r7, #84	; 0x54
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b084      	sub	sp, #16
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005360:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2200      	movs	r2, #0
 8005366:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	f7ff fe6c 	bl	800504c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005374:	bf00      	nop
 8005376:	3710      	adds	r7, #16
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b21      	cmp	r3, #33	; 0x21
 800538e:	d13e      	bne.n	800540e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005398:	d114      	bne.n	80053c4 <UART_Transmit_IT+0x48>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d110      	bne.n	80053c4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	881b      	ldrh	r3, [r3, #0]
 80053ac:	461a      	mov	r2, r3
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	1c9a      	adds	r2, r3, #2
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	621a      	str	r2, [r3, #32]
 80053c2:	e008      	b.n	80053d6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a1b      	ldr	r3, [r3, #32]
 80053c8:	1c59      	adds	r1, r3, #1
 80053ca:	687a      	ldr	r2, [r7, #4]
 80053cc:	6211      	str	r1, [r2, #32]
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053da:	b29b      	uxth	r3, r3
 80053dc:	3b01      	subs	r3, #1
 80053de:	b29b      	uxth	r3, r3
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	4619      	mov	r1, r3
 80053e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d10f      	bne.n	800540a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	68da      	ldr	r2, [r3, #12]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005408:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800540a:	2300      	movs	r3, #0
 800540c:	e000      	b.n	8005410 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800540e:	2302      	movs	r3, #2
  }
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b082      	sub	sp, #8
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005432:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2220      	movs	r2, #32
 8005438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7ff fdf1 	bl	8005024 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3708      	adds	r7, #8
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08c      	sub	sp, #48	; 0x30
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545a:	b2db      	uxtb	r3, r3
 800545c:	2b22      	cmp	r3, #34	; 0x22
 800545e:	f040 80ab 	bne.w	80055b8 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546a:	d117      	bne.n	800549c <UART_Receive_IT+0x50>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	691b      	ldr	r3, [r3, #16]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d113      	bne.n	800549c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005474:	2300      	movs	r3, #0
 8005476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	b29b      	uxth	r3, r3
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	b29a      	uxth	r2, r3
 800548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800548e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005494:	1c9a      	adds	r2, r3, #2
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	629a      	str	r2, [r3, #40]	; 0x28
 800549a:	e026      	b.n	80054ea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ae:	d007      	beq.n	80054c0 <UART_Receive_IT+0x74>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d10a      	bne.n	80054ce <UART_Receive_IT+0x82>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d106      	bne.n	80054ce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	b2da      	uxtb	r2, r3
 80054c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ca:	701a      	strb	r2, [r3, #0]
 80054cc:	e008      	b.n	80054e0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054da:	b2da      	uxtb	r2, r3
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e4:	1c5a      	adds	r2, r3, #1
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	3b01      	subs	r3, #1
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4619      	mov	r1, r3
 80054f8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d15a      	bne.n	80055b4 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0220 	bic.w	r2, r2, #32
 800550c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	68da      	ldr	r2, [r3, #12]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 0201 	bic.w	r2, r2, #1
 800552c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	2220      	movs	r2, #32
 8005532:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	2b01      	cmp	r3, #1
 800553c:	d135      	bne.n	80055aa <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	330c      	adds	r3, #12
 800554a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	e853 3f00 	ldrex	r3, [r3]
 8005552:	613b      	str	r3, [r7, #16]
   return(result);
 8005554:	693b      	ldr	r3, [r7, #16]
 8005556:	f023 0310 	bic.w	r3, r3, #16
 800555a:	627b      	str	r3, [r7, #36]	; 0x24
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	330c      	adds	r3, #12
 8005562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005564:	623a      	str	r2, [r7, #32]
 8005566:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005568:	69f9      	ldr	r1, [r7, #28]
 800556a:	6a3a      	ldr	r2, [r7, #32]
 800556c:	e841 2300 	strex	r3, r2, [r1]
 8005570:	61bb      	str	r3, [r7, #24]
   return(result);
 8005572:	69bb      	ldr	r3, [r7, #24]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d1e5      	bne.n	8005544 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0310 	and.w	r3, r3, #16
 8005582:	2b10      	cmp	r3, #16
 8005584:	d10a      	bne.n	800559c <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005586:	2300      	movs	r3, #0
 8005588:	60fb      	str	r3, [r7, #12]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	60fb      	str	r3, [r7, #12]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	60fb      	str	r3, [r7, #12]
 800559a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a0:	4619      	mov	r1, r3
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fd5c 	bl	8005060 <HAL_UARTEx_RxEventCallback>
 80055a8:	e002      	b.n	80055b0 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fc f8a6 	bl	80016fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055b0:	2300      	movs	r3, #0
 80055b2:	e002      	b.n	80055ba <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055b4:	2300      	movs	r3, #0
 80055b6:	e000      	b.n	80055ba <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055b8:	2302      	movs	r3, #2
  }
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3730      	adds	r7, #48	; 0x30
 80055be:	46bd      	mov	sp, r7
 80055c0:	bd80      	pop	{r7, pc}
	...

080055c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b0c0      	sub	sp, #256	; 0x100
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800561c:	f021 010c 	bic.w	r1, r1, #12
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	430b      	orrs	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	6999      	ldr	r1, [r3, #24]
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	ea40 0301 	orr.w	r3, r0, r1
 800564a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8f      	ldr	r3, [pc, #572]	; (8005890 <UART_SetConfig+0x2cc>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <UART_SetConfig+0xa0>
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <UART_SetConfig+0x2d0>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7fd ff88 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 8005668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566e:	f7fd ff6f 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 8005672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 810c 	bne.w	800589c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	1891      	adds	r1, r2, r2
 800569c:	65b9      	str	r1, [r7, #88]	; 0x58
 800569e:	415b      	adcs	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a6:	4621      	mov	r1, r4
 80056a8:	eb12 0801 	adds.w	r8, r2, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb43 0901 	adc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb49 0303 	adc.w	r3, r9, r3
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056f2:	460b      	mov	r3, r1
 80056f4:	18db      	adds	r3, r3, r3
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	4613      	mov	r3, r2
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005708:	f7fb f97c 	bl	8000a04 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	64b9      	str	r1, [r7, #72]	; 0x48
 8005734:	415b      	adcs	r3, r3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800573c:	4641      	mov	r1, r8
 800573e:	eb12 0a01 	adds.w	sl, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0b01 	adc.w	fp, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	4692      	mov	sl, r2
 800575e:	469b      	mov	fp, r3
 8005760:	4643      	mov	r3, r8
 8005762:	eb1a 0303 	adds.w	r3, sl, r3
 8005766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576a:	464b      	mov	r3, r9
 800576c:	eb4b 0303 	adc.w	r3, fp, r3
 8005770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800579a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579e:	f7fb f931 	bl	8000a04 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2301 	umull	r2, r3, r3, r1
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2264      	movs	r2, #100	; 0x64
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	1acb      	subs	r3, r1, r3
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057cc:	441c      	add	r4, r3
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e8:	415b      	adcs	r3, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6339      	str	r1, [r7, #48]	; 0x30
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800583c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005844:	460b      	mov	r3, r1
 8005846:	18db      	adds	r3, r3, r3
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	4613      	mov	r3, r2
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800585a:	f7fb f8d3 	bl	8000a04 <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x2d4>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <UART_SetConfig+0x2d4>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 0207 	and.w	r2, r3, #7
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4422      	add	r2, r4
 800588a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588c:	e105      	b.n	8005a9a <UART_SetConfig+0x4d6>
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	6239      	str	r1, [r7, #32]
 80058b6:	415b      	adcs	r3, r3
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058be:	4641      	mov	r1, r8
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0501 	adc.w	r5, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e4:	464b      	mov	r3, r9
 80058e6:	eb45 0303 	adc.w	r3, r5, r3
 80058ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800590a:	4629      	mov	r1, r5
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005914:	4621      	mov	r1, r4
 8005916:	008a      	lsls	r2, r1, #2
 8005918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800591c:	f7fb f872 	bl	8000a04 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011c      	lsls	r4, r3, #4
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800593c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	61b9      	str	r1, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ba:	f7fb f823 	bl	8000a04 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	441c      	add	r4, r3
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e8:	2200      	movs	r2, #0
 80059ea:	673b      	str	r3, [r7, #112]	; 0x70
 80059ec:	677a      	str	r2, [r7, #116]	; 0x74
 80059ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	415b      	adcs	r3, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a02:	4641      	mov	r1, r8
 8005a04:	1851      	adds	r1, r2, r1
 8005a06:	6039      	str	r1, [r7, #0]
 8005a08:	4649      	mov	r1, r9
 8005a0a:	414b      	adcs	r3, r1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	00cb      	lsls	r3, r1, #3
 8005a1e:	4651      	mov	r1, sl
 8005a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a24:	4651      	mov	r1, sl
 8005a26:	00ca      	lsls	r2, r1, #3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4642      	mov	r2, r8
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	663b      	str	r3, [r7, #96]	; 0x60
 8005a48:	667a      	str	r2, [r7, #100]	; 0x64
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a56:	4649      	mov	r1, r9
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4641      	mov	r1, r8
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a68:	f7fa ffcc 	bl	8000a04 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4422      	add	r2, r4
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	51eb851f 	.word	0x51eb851f
 8005aac:	00000000 	.word	0x00000000

08005ab0 <control_PID_Position>:
 */

#include <PID.h>

void control_PID_Position(PID_control *pid_tune, float setpoint_posi_rotation, float Kp, float Ki, float Kd)
{
 8005ab0:	b5b0      	push	{r4, r5, r7, lr}
 8005ab2:	b086      	sub	sp, #24
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6178      	str	r0, [r7, #20]
 8005ab8:	ed87 0a04 	vstr	s0, [r7, #16]
 8005abc:	edc7 0a03 	vstr	s1, [r7, #12]
 8005ac0:	ed87 1a02 	vstr	s2, [r7, #8]
 8005ac4:	edc7 1a01 	vstr	s3, [r7, #4]

  now_position = (float)instance_enc.position * 360 / Pulseee; // now_position = degree
 8005ac8:	4b5b      	ldr	r3, [pc, #364]	; (8005c38 <control_PID_Position+0x188>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad4:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005c3c <control_PID_Position+0x18c>
 8005ad8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005adc:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005c40 <control_PID_Position+0x190>
 8005ae0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ae4:	4b57      	ldr	r3, [pc, #348]	; (8005c44 <control_PID_Position+0x194>)
 8005ae6:	edc3 7a00 	vstr	s15, [r3]
  number_rotation = now_position / 360;
 8005aea:	4b56      	ldr	r3, [pc, #344]	; (8005c44 <control_PID_Position+0x194>)
 8005aec:	ed93 7a00 	vldr	s14, [r3]
 8005af0:	eddf 6a52 	vldr	s13, [pc, #328]	; 8005c3c <control_PID_Position+0x18c>
 8005af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005af8:	4b53      	ldr	r3, [pc, #332]	; (8005c48 <control_PID_Position+0x198>)
 8005afa:	edc3 7a00 	vstr	s15, [r3]
  error_posi = setpoint_posi_rotation - (now_position);
 8005afe:	4b51      	ldr	r3, [pc, #324]	; (8005c44 <control_PID_Position+0x194>)
 8005b00:	edd3 7a00 	vldr	s15, [r3]
 8005b04:	ed97 7a04 	vldr	s14, [r7, #16]
 8005b08:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b0c:	4b4f      	ldr	r3, [pc, #316]	; (8005c4c <control_PID_Position+0x19c>)
 8005b0e:	edc3 7a00 	vstr	s15, [r3]
  pid_tune->P_part = error_posi;
 8005b12:	4b4e      	ldr	r3, [pc, #312]	; (8005c4c <control_PID_Position+0x19c>)
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	697b      	ldr	r3, [r7, #20]
 8005b18:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_posi * Ts;
 8005b1a:	697b      	ldr	r3, [r7, #20]
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fa fcb6 	bl	8000490 <__aeabi_f2d>
 8005b24:	4604      	mov	r4, r0
 8005b26:	460d      	mov	r5, r1
 8005b28:	4b48      	ldr	r3, [pc, #288]	; (8005c4c <control_PID_Position+0x19c>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7fa fcaf 	bl	8000490 <__aeabi_f2d>
 8005b32:	a33f      	add	r3, pc, #252	; (adr r3, 8005c30 <control_PID_Position+0x180>)
 8005b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b38:	f7fa fd02 	bl	8000540 <__aeabi_dmul>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	460b      	mov	r3, r1
 8005b40:	4620      	mov	r0, r4
 8005b42:	4629      	mov	r1, r5
 8005b44:	f7fa fb46 	bl	80001d4 <__adddf3>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4610      	mov	r0, r2
 8005b4e:	4619      	mov	r1, r3
 8005b50:	f7fa ff08 	bl	8000964 <__aeabi_d2f>
 8005b54:	4602      	mov	r2, r0
 8005b56:	697b      	ldr	r3, [r7, #20]
 8005b58:	605a      	str	r2, [r3, #4]
  pid_tune->D_part = (error_posi - pre_error_posi) / Ts;
 8005b5a:	4b3c      	ldr	r3, [pc, #240]	; (8005c4c <control_PID_Position+0x19c>)
 8005b5c:	ed93 7a00 	vldr	s14, [r3]
 8005b60:	4b3b      	ldr	r3, [pc, #236]	; (8005c50 <control_PID_Position+0x1a0>)
 8005b62:	edd3 7a00 	vldr	s15, [r3]
 8005b66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b6a:	ee17 0a90 	vmov	r0, s15
 8005b6e:	f7fa fc8f 	bl	8000490 <__aeabi_f2d>
 8005b72:	a32f      	add	r3, pc, #188	; (adr r3, 8005c30 <control_PID_Position+0x180>)
 8005b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b78:	f7fa fe0c 	bl	8000794 <__aeabi_ddiv>
 8005b7c:	4602      	mov	r2, r0
 8005b7e:	460b      	mov	r3, r1
 8005b80:	4610      	mov	r0, r2
 8005b82:	4619      	mov	r1, r3
 8005b84:	f7fa feee 	bl	8000964 <__aeabi_d2f>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	609a      	str	r2, [r3, #8]
  if(error_posi < 0.001f*setpoint_posi_rotation)
 8005b8e:	edd7 7a04 	vldr	s15, [r7, #16]
 8005b92:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8005c54 <control_PID_Position+0x1a4>
 8005b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005b9a:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <control_PID_Position+0x19c>)
 8005b9c:	edd3 7a00 	vldr	s15, [r3]
 8005ba0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ba8:	dd03      	ble.n	8005bb2 <control_PID_Position+0x102>
  {
	pid_tune->I_part = 0;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f04f 0200 	mov.w	r2, #0
 8005bb0:	605a      	str	r2, [r3, #4]
  }
  output_pid_posi = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	ed93 7a00 	vldr	s14, [r3]
 8005bb8:	edd7 7a03 	vldr	s15, [r7, #12]
 8005bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	edd3 6a01 	vldr	s13, [r3, #4]
 8005bc6:	edd7 7a02 	vldr	s15, [r7, #8]
 8005bca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	edd3 6a02 	vldr	s13, [r3, #8]
 8005bd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8005bdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005be0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005be4:	4b1c      	ldr	r3, [pc, #112]	; (8005c58 <control_PID_Position+0x1a8>)
 8005be6:	edc3 7a00 	vstr	s15, [r3]
  if (output_pid_posi > 100.0)
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <control_PID_Position+0x1a8>)
 8005bec:	edd3 7a00 	vldr	s15, [r3]
 8005bf0:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8005c5c <control_PID_Position+0x1ac>
 8005bf4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005bf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bfc:	dd03      	ble.n	8005c06 <control_PID_Position+0x156>
  {
    output_pid_posi = 100.0;
 8005bfe:	4b16      	ldr	r3, [pc, #88]	; (8005c58 <control_PID_Position+0x1a8>)
 8005c00:	4a17      	ldr	r2, [pc, #92]	; (8005c60 <control_PID_Position+0x1b0>)
 8005c02:	601a      	str	r2, [r3, #0]
 8005c04:	e00c      	b.n	8005c20 <control_PID_Position+0x170>
  }
  else if (output_pid_posi < -100.0)
 8005c06:	4b14      	ldr	r3, [pc, #80]	; (8005c58 <control_PID_Position+0x1a8>)
 8005c08:	edd3 7a00 	vldr	s15, [r3]
 8005c0c:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8005c64 <control_PID_Position+0x1b4>
 8005c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c18:	d502      	bpl.n	8005c20 <control_PID_Position+0x170>
  {
    output_pid_posi = -100.0;
 8005c1a:	4b0f      	ldr	r3, [pc, #60]	; (8005c58 <control_PID_Position+0x1a8>)
 8005c1c:	4a12      	ldr	r2, [pc, #72]	; (8005c68 <control_PID_Position+0x1b8>)
 8005c1e:	601a      	str	r2, [r3, #0]
  }
  pre_error_posi = error_posi;
 8005c20:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <control_PID_Position+0x19c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0a      	ldr	r2, [pc, #40]	; (8005c50 <control_PID_Position+0x1a0>)
 8005c26:	6013      	str	r3, [r2, #0]
}
 8005c28:	bf00      	nop
 8005c2a:	3718      	adds	r7, #24
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005c30:	47ae147b 	.word	0x47ae147b
 8005c34:	3f847ae1 	.word	0x3f847ae1
 8005c38:	20000320 	.word	0x20000320
 8005c3c:	43b40000 	.word	0x43b40000
 8005c40:	44a50000 	.word	0x44a50000
 8005c44:	20000288 	.word	0x20000288
 8005c48:	20000290 	.word	0x20000290
 8005c4c:	20000278 	.word	0x20000278
 8005c50:	2000027c 	.word	0x2000027c
 8005c54:	3a83126f 	.word	0x3a83126f
 8005c58:	20000274 	.word	0x20000274
 8005c5c:	42c80000 	.word	0x42c80000
 8005c60:	42c80000 	.word	0x42c80000
 8005c64:	c2c80000 	.word	0xc2c80000
 8005c68:	c2c80000 	.word	0xc2c80000
 8005c6c:	00000000 	.word	0x00000000

08005c70 <control_PID_Velocity>:

void control_PID_Velocity(PID_control *pid_tune, float setpoint_velo, float Kp, float Ki, float Kd)
{ // velocity vong/phut
 8005c70:	b5b0      	push	{r4, r5, r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6178      	str	r0, [r7, #20]
 8005c78:	ed87 0a04 	vstr	s0, [r7, #16]
 8005c7c:	edc7 0a03 	vstr	s1, [r7, #12]
 8005c80:	ed87 1a02 	vstr	s2, [r7, #8]
 8005c84:	edc7 1a01 	vstr	s3, [r7, #4]
  velocity_real = (float)instance_enc.speed_by_encoder * 60.0f / (Ts * Pulseee);
 8005c88:	4b5b      	ldr	r3, [pc, #364]	; (8005df8 <control_PID_Velocity+0x188>)
 8005c8a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8005c8e:	ee07 3a90 	vmov	s15, r3
 8005c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005c96:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8005dfc <control_PID_Velocity+0x18c>
 8005c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c9e:	ee17 0a90 	vmov	r0, s15
 8005ca2:	f7fa fbf5 	bl	8000490 <__aeabi_f2d>
 8005ca6:	a350      	add	r3, pc, #320	; (adr r3, 8005de8 <control_PID_Velocity+0x178>)
 8005ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cac:	f7fa fd72 	bl	8000794 <__aeabi_ddiv>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4610      	mov	r0, r2
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	f7fa fe54 	bl	8000964 <__aeabi_d2f>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	4a50      	ldr	r2, [pc, #320]	; (8005e00 <control_PID_Velocity+0x190>)
 8005cc0:	6013      	str	r3, [r2, #0]
  error_velo = setpoint_velo - (velocity_real);
 8005cc2:	4b4f      	ldr	r3, [pc, #316]	; (8005e00 <control_PID_Velocity+0x190>)
 8005cc4:	edd3 7a00 	vldr	s15, [r3]
 8005cc8:	ed97 7a04 	vldr	s14, [r7, #16]
 8005ccc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cd0:	4b4c      	ldr	r3, [pc, #304]	; (8005e04 <control_PID_Velocity+0x194>)
 8005cd2:	edc3 7a00 	vstr	s15, [r3]
  instance_enc.velocity = velocity_real;
 8005cd6:	4b4a      	ldr	r3, [pc, #296]	; (8005e00 <control_PID_Velocity+0x190>)
 8005cd8:	edd3 7a00 	vldr	s15, [r3]
 8005cdc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005ce0:	ee17 2a90 	vmov	r2, s15
 8005ce4:	4b44      	ldr	r3, [pc, #272]	; (8005df8 <control_PID_Velocity+0x188>)
 8005ce6:	60da      	str	r2, [r3, #12]
  pid_tune->P_part = error_velo;
 8005ce8:	4b46      	ldr	r3, [pc, #280]	; (8005e04 <control_PID_Velocity+0x194>)
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	601a      	str	r2, [r3, #0]
  pid_tune->I_part += error_velo * Ts;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fa fbcb 	bl	8000490 <__aeabi_f2d>
 8005cfa:	4604      	mov	r4, r0
 8005cfc:	460d      	mov	r5, r1
 8005cfe:	4b41      	ldr	r3, [pc, #260]	; (8005e04 <control_PID_Velocity+0x194>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4618      	mov	r0, r3
 8005d04:	f7fa fbc4 	bl	8000490 <__aeabi_f2d>
 8005d08:	a339      	add	r3, pc, #228	; (adr r3, 8005df0 <control_PID_Velocity+0x180>)
 8005d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0e:	f7fa fc17 	bl	8000540 <__aeabi_dmul>
 8005d12:	4602      	mov	r2, r0
 8005d14:	460b      	mov	r3, r1
 8005d16:	4620      	mov	r0, r4
 8005d18:	4629      	mov	r1, r5
 8005d1a:	f7fa fa5b 	bl	80001d4 <__adddf3>
 8005d1e:	4602      	mov	r2, r0
 8005d20:	460b      	mov	r3, r1
 8005d22:	4610      	mov	r0, r2
 8005d24:	4619      	mov	r1, r3
 8005d26:	f7fa fe1d 	bl	8000964 <__aeabi_d2f>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	605a      	str	r2, [r3, #4]
  pid_tune->D_part = (error_velo - pre_error_velo) / Ts;
 8005d30:	4b34      	ldr	r3, [pc, #208]	; (8005e04 <control_PID_Velocity+0x194>)
 8005d32:	ed93 7a00 	vldr	s14, [r3]
 8005d36:	4b34      	ldr	r3, [pc, #208]	; (8005e08 <control_PID_Velocity+0x198>)
 8005d38:	edd3 7a00 	vldr	s15, [r3]
 8005d3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d40:	ee17 0a90 	vmov	r0, s15
 8005d44:	f7fa fba4 	bl	8000490 <__aeabi_f2d>
 8005d48:	a329      	add	r3, pc, #164	; (adr r3, 8005df0 <control_PID_Velocity+0x180>)
 8005d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d4e:	f7fa fd21 	bl	8000794 <__aeabi_ddiv>
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	4610      	mov	r0, r2
 8005d58:	4619      	mov	r1, r3
 8005d5a:	f7fa fe03 	bl	8000964 <__aeabi_d2f>
 8005d5e:	4602      	mov	r2, r0
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	609a      	str	r2, [r3, #8]

  output_pid_velo = Kp * (pid_tune->P_part) + Ki * (pid_tune->I_part) + Kd * (pid_tune->D_part);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	ed93 7a00 	vldr	s14, [r3]
 8005d6a:	edd7 7a03 	vldr	s15, [r7, #12]
 8005d6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	edd3 6a01 	vldr	s13, [r3, #4]
 8005d78:	edd7 7a02 	vldr	s15, [r7, #8]
 8005d7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	edd3 6a02 	vldr	s13, [r3, #8]
 8005d8a:	edd7 7a01 	vldr	s15, [r7, #4]
 8005d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d96:	4b1d      	ldr	r3, [pc, #116]	; (8005e0c <control_PID_Velocity+0x19c>)
 8005d98:	edc3 7a00 	vstr	s15, [r3]
  if (output_pid_velo > 100.0)
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <control_PID_Velocity+0x19c>)
 8005d9e:	edd3 7a00 	vldr	s15, [r3]
 8005da2:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8005e10 <control_PID_Velocity+0x1a0>
 8005da6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005daa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dae:	dd03      	ble.n	8005db8 <control_PID_Velocity+0x148>
  {
    output_pid_velo = 100.0;
 8005db0:	4b16      	ldr	r3, [pc, #88]	; (8005e0c <control_PID_Velocity+0x19c>)
 8005db2:	4a18      	ldr	r2, [pc, #96]	; (8005e14 <control_PID_Velocity+0x1a4>)
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	e00c      	b.n	8005dd2 <control_PID_Velocity+0x162>
  }
  else if (output_pid_velo < -100.0)
 8005db8:	4b14      	ldr	r3, [pc, #80]	; (8005e0c <control_PID_Velocity+0x19c>)
 8005dba:	edd3 7a00 	vldr	s15, [r3]
 8005dbe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8005e18 <control_PID_Velocity+0x1a8>
 8005dc2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dca:	d502      	bpl.n	8005dd2 <control_PID_Velocity+0x162>
  {
    output_pid_velo = -100.0;
 8005dcc:	4b0f      	ldr	r3, [pc, #60]	; (8005e0c <control_PID_Velocity+0x19c>)
 8005dce:	4a13      	ldr	r2, [pc, #76]	; (8005e1c <control_PID_Velocity+0x1ac>)
 8005dd0:	601a      	str	r2, [r3, #0]
  }
  pre_error_velo = error_velo;
 8005dd2:	4b0c      	ldr	r3, [pc, #48]	; (8005e04 <control_PID_Velocity+0x194>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a0c      	ldr	r2, [pc, #48]	; (8005e08 <control_PID_Velocity+0x198>)
 8005dd8:	6013      	str	r3, [r2, #0]
}
 8005dda:	bf00      	nop
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bdb0      	pop	{r4, r5, r7, pc}
 8005de2:	bf00      	nop
 8005de4:	f3af 8000 	nop.w
 8005de8:	66666667 	.word	0x66666667
 8005dec:	402a6666 	.word	0x402a6666
 8005df0:	47ae147b 	.word	0x47ae147b
 8005df4:	3f847ae1 	.word	0x3f847ae1
 8005df8:	20000320 	.word	0x20000320
 8005dfc:	42700000 	.word	0x42700000
 8005e00:	2000028c 	.word	0x2000028c
 8005e04:	20000280 	.word	0x20000280
 8005e08:	20000284 	.word	0x20000284
 8005e0c:	20000270 	.word	0x20000270
 8005e10:	42c80000 	.word	0x42c80000
 8005e14:	42c80000 	.word	0x42c80000
 8005e18:	c2c80000 	.word	0xc2c80000
 8005e1c:	c2c80000 	.word	0xc2c80000

08005e20 <PWM_control_velocity>:
 *      Author: lehuu
 */

#include "PWM.h"
void PWM_control_velocity(TIM_HandleTypeDef *htim, float duty)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	ed87 0a00 	vstr	s0, [r7]
  if (duty > 0)
 8005e2c:	edd7 7a00 	vldr	s15, [r7]
 8005e30:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e38:	dd22      	ble.n	8005e80 <PWM_control_velocity+0x60>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e40:	482d      	ldr	r0, [pc, #180]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005e42:	f7fc ff3b 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8005e46:	2200      	movs	r2, #0
 8005e48:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e4c:	482a      	ldr	r0, [pc, #168]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005e4e:	f7fc ff35 	bl	8002cbc <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (duty) * (htim1.Instance->ARR) / 100;
 8005e52:	4b2a      	ldr	r3, [pc, #168]	; (8005efc <PWM_control_velocity+0xdc>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e58:	ee07 3a90 	vmov	s15, r3
 8005e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005e60:	edd7 7a00 	vldr	s15, [r7]
 8005e64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005e68:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f00 <PWM_control_velocity+0xe0>
 8005e6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005e70:	4b22      	ldr	r3, [pc, #136]	; (8005efc <PWM_control_velocity+0xdc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005e78:	ee17 2a90 	vmov	r2, s15
 8005e7c:	63da      	str	r2, [r3, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8005e7e:	e037      	b.n	8005ef0 <PWM_control_velocity+0xd0>
  else if (duty < 0)
 8005e80:	edd7 7a00 	vldr	s15, [r7]
 8005e84:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005e88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005e8c:	d524      	bpl.n	8005ed8 <PWM_control_velocity+0xb8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005e94:	4818      	ldr	r0, [pc, #96]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005e96:	f7fc ff11 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ea0:	4815      	ldr	r0, [pc, #84]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005ea2:	f7fc ff0b 	bl	8002cbc <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100;
 8005ea6:	edd7 7a00 	vldr	s15, [r7]
 8005eaa:	eeb1 7a67 	vneg.f32	s14, s15
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <PWM_control_velocity+0xdc>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eb4:	ee07 3a90 	vmov	s15, r3
 8005eb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ebc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005ec0:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005f00 <PWM_control_velocity+0xe0>
 8005ec4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005ec8:	4b0c      	ldr	r3, [pc, #48]	; (8005efc <PWM_control_velocity+0xdc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005ed0:	ee17 2a90 	vmov	r2, s15
 8005ed4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005ed6:	e00b      	b.n	8005ef0 <PWM_control_velocity+0xd0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005ede:	4806      	ldr	r0, [pc, #24]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005ee0:	f7fc feec 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8005ee4:	2201      	movs	r2, #1
 8005ee6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005eea:	4803      	ldr	r0, [pc, #12]	; (8005ef8 <PWM_control_velocity+0xd8>)
 8005eec:	f7fc fee6 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8005ef0:	bf00      	nop
 8005ef2:	3708      	adds	r7, #8
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}
 8005ef8:	40020800 	.word	0x40020800
 8005efc:	20000090 	.word	0x20000090
 8005f00:	42c80000 	.word	0x42c80000

08005f04 <PWM_control_position>:

void PWM_control_position(TIM_HandleTypeDef *htim, float duty)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b082      	sub	sp, #8
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	ed87 0a00 	vstr	s0, [r7]
  if (duty > 0)
 8005f10:	edd7 7a00 	vldr	s15, [r7]
 8005f14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f1c:	dd22      	ble.n	8005f64 <PWM_control_position+0x60>
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f24:	482d      	ldr	r0, [pc, #180]	; (8005fdc <PWM_control_position+0xd8>)
 8005f26:	f7fc fec9 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_RESET);
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f30:	482a      	ldr	r0, [pc, #168]	; (8005fdc <PWM_control_position+0xd8>)
 8005f32:	f7fc fec3 	bl	8002cbc <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (duty) * (htim1.Instance->ARR) / 100;
 8005f36:	4b2a      	ldr	r3, [pc, #168]	; (8005fe0 <PWM_control_position+0xdc>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3c:	ee07 3a90 	vmov	s15, r3
 8005f40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005f44:	edd7 7a00 	vldr	s15, [r7]
 8005f48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005f4c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005fe4 <PWM_control_position+0xe0>
 8005f50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005f54:	4b22      	ldr	r3, [pc, #136]	; (8005fe0 <PWM_control_position+0xdc>)
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f5c:	ee17 2a90 	vmov	r2, s15
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c
  else
  {
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
  }
}
 8005f62:	e037      	b.n	8005fd4 <PWM_control_position+0xd0>
  else if (duty < 0)
 8005f64:	edd7 7a00 	vldr	s15, [r7]
 8005f68:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	d524      	bpl.n	8005fbc <PWM_control_position+0xb8>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_RESET);
 8005f72:	2200      	movs	r2, #0
 8005f74:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005f78:	4818      	ldr	r0, [pc, #96]	; (8005fdc <PWM_control_position+0xd8>)
 8005f7a:	f7fc fe9f 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005f84:	4815      	ldr	r0, [pc, #84]	; (8005fdc <PWM_control_position+0xd8>)
 8005f86:	f7fc fe99 	bl	8002cbc <HAL_GPIO_WritePin>
    htim1.Instance->CCR3 = (-duty) * (htim1.Instance->ARR) / 100;
 8005f8a:	edd7 7a00 	vldr	s15, [r7]
 8005f8e:	eeb1 7a67 	vneg.f32	s14, s15
 8005f92:	4b13      	ldr	r3, [pc, #76]	; (8005fe0 <PWM_control_position+0xdc>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f98:	ee07 3a90 	vmov	s15, r3
 8005f9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005fa0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005fa4:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005fe4 <PWM_control_position+0xe0>
 8005fa8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005fac:	4b0c      	ldr	r3, [pc, #48]	; (8005fe0 <PWM_control_position+0xdc>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005fb4:	ee17 2a90 	vmov	r2, s15
 8005fb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005fba:	e00b      	b.n	8005fd4 <PWM_control_position+0xd0>
    HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, GPIO_PIN_SET);
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005fc2:	4806      	ldr	r0, [pc, #24]	; (8005fdc <PWM_control_position+0xd8>)
 8005fc4:	f7fc fe7a 	bl	8002cbc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, GPIO_PIN_SET);
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005fce:	4803      	ldr	r0, [pc, #12]	; (8005fdc <PWM_control_position+0xd8>)
 8005fd0:	f7fc fe74 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8005fd4:	bf00      	nop
 8005fd6:	3708      	adds	r7, #8
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	40020800 	.word	0x40020800
 8005fe0:	20000090 	.word	0x20000090
 8005fe4:	42c80000 	.word	0x42c80000

08005fe8 <crc16_floating>:
	for(counter = 0; counter < len; counter++)
		crc = (crc<<8) ^ crc16tab[((crc>>8) ^ *(uint8_t *)buf++)&0x00FF];
	return crc;
}

uint16_t crc16_floating(uint8_t next, uint16_t seed) {
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	4603      	mov	r3, r0
 8005ff0:	460a      	mov	r2, r1
 8005ff2:	71fb      	strb	r3, [r7, #7]
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	80bb      	strh	r3, [r7, #4]
    return (seed<<8) ^ crc16tab[(seed>>8) ^ next & 0x00FF];
 8005ff8:	88bb      	ldrh	r3, [r7, #4]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	b21a      	sxth	r2, r3
 8005ffe:	88bb      	ldrh	r3, [r7, #4]
 8006000:	0a1b      	lsrs	r3, r3, #8
 8006002:	b29b      	uxth	r3, r3
 8006004:	4619      	mov	r1, r3
 8006006:	79fb      	ldrb	r3, [r7, #7]
 8006008:	404b      	eors	r3, r1
 800600a:	4906      	ldr	r1, [pc, #24]	; (8006024 <crc16_floating+0x3c>)
 800600c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8006010:	b21b      	sxth	r3, r3
 8006012:	4053      	eors	r3, r2
 8006014:	b21b      	sxth	r3, r3
 8006016:	b29b      	uxth	r3, r3
}
 8006018:	4618      	mov	r0, r3
 800601a:	370c      	adds	r7, #12
 800601c:	46bd      	mov	sp, r7
 800601e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006022:	4770      	bx	lr
 8006024:	080065d0 	.word	0x080065d0

08006028 <encoder>:
 *      Author: lehuu
 */
#include "encoder.h"

void encoder()
{
 8006028:	b480      	push	{r7}
 800602a:	af00      	add	r7, sp, #0
  if (data_after_cut[0] == 0x44) //reset
 800602c:	4b17      	ldr	r3, [pc, #92]	; (800608c <encoder+0x64>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b44      	cmp	r3, #68	; 0x44
 8006032:	d10a      	bne.n	800604a <encoder+0x22>
  {
    htim2.Instance->CNT = 0;
 8006034:	4b16      	ldr	r3, [pc, #88]	; (8006090 <encoder+0x68>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2200      	movs	r2, #0
 800603a:	625a      	str	r2, [r3, #36]	; 0x24
    instance_enc.speed_by_encoder = 0;
 800603c:	4b15      	ldr	r3, [pc, #84]	; (8006094 <encoder+0x6c>)
 800603e:	2200      	movs	r2, #0
 8006040:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = 0;
 8006042:	4b14      	ldr	r3, [pc, #80]	; (8006094 <encoder+0x6c>)
 8006044:	2200      	movs	r2, #0
 8006046:	80da      	strh	r2, [r3, #6]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
    //	instance_enc.speed_by_encoder = htim2.Instance->CNT;
    instance_enc.position += instance_enc.speed_by_encoder;
  }
//  //	htim2.Instance->CNT = 0;
}
 8006048:	e01a      	b.n	8006080 <encoder+0x58>
    instance_enc.speed_by_encoder = htim2.Instance->CNT - instance_enc.pre_speed_by_encoder;   // so xung giua 2 lan doc encoder
 800604a:	4b11      	ldr	r3, [pc, #68]	; (8006090 <encoder+0x68>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006050:	b29a      	uxth	r2, r3
 8006052:	4b10      	ldr	r3, [pc, #64]	; (8006094 <encoder+0x6c>)
 8006054:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8006058:	b29b      	uxth	r3, r3
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	b29b      	uxth	r3, r3
 800605e:	b21a      	sxth	r2, r3
 8006060:	4b0c      	ldr	r3, [pc, #48]	; (8006094 <encoder+0x6c>)
 8006062:	809a      	strh	r2, [r3, #4]
    instance_enc.pre_speed_by_encoder = htim2.Instance->CNT;
 8006064:	4b0a      	ldr	r3, [pc, #40]	; (8006090 <encoder+0x68>)
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	b21a      	sxth	r2, r3
 800606c:	4b09      	ldr	r3, [pc, #36]	; (8006094 <encoder+0x6c>)
 800606e:	80da      	strh	r2, [r3, #6]
    instance_enc.position += instance_enc.speed_by_encoder;
 8006070:	4b08      	ldr	r3, [pc, #32]	; (8006094 <encoder+0x6c>)
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a07      	ldr	r2, [pc, #28]	; (8006094 <encoder+0x6c>)
 8006076:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800607a:	4413      	add	r3, r2
 800607c:	4a05      	ldr	r2, [pc, #20]	; (8006094 <encoder+0x6c>)
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr
 800608a:	bf00      	nop
 800608c:	200002dc 	.word	0x200002dc
 8006090:	200000d8 	.word	0x200000d8
 8006094:	20000320 	.word	0x20000320

08006098 <UART_get_data>:
 * @param pu8Dest :Data cut out of frame 
 * @param pu16Dest_len :Length of data that has been trimmed from frame 
 * @return int8_t to check if frame can be trimmed correctly
 */
int8_t UART_get_data(uint8_t *pu8Src, uint16_t u16Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{   
 8006098:	b580      	push	{r7, lr}
 800609a:	b08a      	sub	sp, #40	; 0x28
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	607a      	str	r2, [r7, #4]
 80060a2:	603b      	str	r3, [r7, #0]
 80060a4:	460b      	mov	r3, r1
 80060a6:	817b      	strh	r3, [r7, #10]
	const uint8_t *pu8Src_start = pu8Src;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	61fb      	str	r3, [r7, #28]
	const uint8_t *pu8Src_findStart = pu8Src + (u16Src_len);
 80060ac:	897b      	ldrh	r3, [r7, #10]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4413      	add	r3, r2
 80060b2:	61bb      	str	r3, [r7, #24]
	char checkFindStart = 0;
 80060b4:	2300      	movs	r3, #0
 80060b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t checkESC = 0;
 80060ba:	2300      	movs	r3, #0
 80060bc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	uint8_t index = 0;
 80060c0:	2300      	movs	r3, #0
 80060c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint16_t crc_check = 0;
 80060c6:	2300      	movs	r3, #0
 80060c8:	847b      	strh	r3, [r7, #34]	; 0x22
	// Advance src to start byte
	while(pu8Src < pu8Src_findStart && *pu8Src != PROTO_START_BYTE)
 80060ca:	e002      	b.n	80060d2 <UART_get_data+0x3a>
	{
		pu8Src++;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	3301      	adds	r3, #1
 80060d0:	60fb      	str	r3, [r7, #12]
	while(pu8Src < pu8Src_findStart && *pu8Src != PROTO_START_BYTE)
 80060d2:	68fa      	ldr	r2, [r7, #12]
 80060d4:	69bb      	ldr	r3, [r7, #24]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d203      	bcs.n	80060e2 <UART_get_data+0x4a>
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b02      	cmp	r3, #2
 80060e0:	d1f4      	bne.n	80060cc <UART_get_data+0x34>
	}
	if(*pu8Src == PROTO_START_BYTE)   // If you just enter and receive the start byte, then you don't have to enter the while function
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d102      	bne.n	80060f0 <UART_get_data+0x58>
	{
		checkFindStart = 1;
 80060ea:	2301      	movs	r3, #1
 80060ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}
	// Set our error return val for dest_len
	if(checkFindStart == 0)
 80060f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d102      	bne.n	80060fe <UART_get_data+0x66>
	{
	   return no_valid;
 80060f8:	f04f 33ff 	mov.w	r3, #4294967295
 80060fc:	e07c      	b.n	80061f8 <UART_get_data+0x160>
	}
	// Loop through the data
	pu8Src++;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3301      	adds	r3, #1
 8006102:	60fb      	str	r3, [r7, #12]
	while(index < PROTO_DATA_SIZE_RX)
 8006104:	e03e      	b.n	8006184 <UART_get_data+0xec>
	{
		if (*pu8Src == PROTO_ESC_BYTE) // 7E
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b7e      	cmp	r3, #126	; 0x7e
 800610c:	d123      	bne.n	8006156 <UART_get_data+0xbe>
		{
			crc_check = crc16_floating(*pu8Src, crc_check);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	781b      	ldrb	r3, [r3, #0]
 8006112:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8006114:	4611      	mov	r1, r2
 8006116:	4618      	mov	r0, r3
 8006118:	f7ff ff66 	bl	8005fe8 <crc16_floating>
 800611c:	4603      	mov	r3, r0
 800611e:	847b      	strh	r3, [r7, #34]	; 0x22
			*(pu8Dest++)  = (*(++pu8Src)) ^ 0x20;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	3301      	adds	r3, #1
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	781a      	ldrb	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	1c59      	adds	r1, r3, #1
 800612e:	6079      	str	r1, [r7, #4]
 8006130:	f082 0220 	eor.w	r2, r2, #32
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
			crc_check = crc16_floating(*pu8Src, crc_check);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800613e:	4611      	mov	r1, r2
 8006140:	4618      	mov	r0, r3
 8006142:	f7ff ff51 	bl	8005fe8 <crc16_floating>
 8006146:	4603      	mov	r3, r0
 8006148:	847b      	strh	r3, [r7, #34]	; 0x22
			checkESC++;
 800614a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800614e:	3301      	adds	r3, #1
 8006150:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8006154:	e00e      	b.n	8006174 <UART_get_data+0xdc>
		}
		else
		{
			crc_check = crc16_floating(*pu8Src, crc_check);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800615c:	4611      	mov	r1, r2
 800615e:	4618      	mov	r0, r3
 8006160:	f7ff ff42 	bl	8005fe8 <crc16_floating>
 8006164:	4603      	mov	r3, r0
 8006166:	847b      	strh	r3, [r7, #34]	; 0x22
			*(pu8Dest++) = *pu8Src;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	607a      	str	r2, [r7, #4]
 800616e:	68fa      	ldr	r2, [r7, #12]
 8006170:	7812      	ldrb	r2, [r2, #0]
 8006172:	701a      	strb	r2, [r3, #0]
		}
		pu8Src++;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	3301      	adds	r3, #1
 8006178:	60fb      	str	r3, [r7, #12]
		index++;
 800617a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800617e:	3301      	adds	r3, #1
 8006180:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	while(index < PROTO_DATA_SIZE_RX)
 8006184:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006188:	2b0c      	cmp	r3, #12
 800618a:	d9bc      	bls.n	8006106 <UART_get_data+0x6e>
	}

	if (*(pu8Src + 2) != PROTO_END_BYTE)
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	3302      	adds	r3, #2
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b03      	cmp	r3, #3
 8006194:	d002      	beq.n	800619c <UART_get_data+0x104>
		{  // pu8Src in first CRC now
			return no_valid;
 8006196:	f04f 33ff 	mov.w	r3, #4294967295
 800619a:	e02d      	b.n	80061f8 <UART_get_data+0x160>
		}
		uint8_t byte2_crc = (crc_check) & 0xFF;
 800619c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800619e:	75fb      	strb	r3, [r7, #23]
		uint8_t byte1_crc = (crc_check >> 8) & 0xFF;
 80061a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80061a2:	0a1b      	lsrs	r3, r3, #8
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	75bb      	strb	r3, [r7, #22]
		if(*(pu8Src) != byte1_crc || *(++pu8Src) != byte2_crc)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	7dba      	ldrb	r2, [r7, #22]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	d107      	bne.n	80061c2 <UART_get_data+0x12a>
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3301      	adds	r3, #1
 80061b6:	60fb      	str	r3, [r7, #12]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	7dfa      	ldrb	r2, [r7, #23]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d002      	beq.n	80061c8 <UART_get_data+0x130>
		{
			return false_CRC;
 80061c2:	f06f 0301 	mvn.w	r3, #1
 80061c6:	e017      	b.n	80061f8 <UART_get_data+0x160>
		}
		*pu16Dest_len =(++pu8Src - pu8Src_start - 4 - checkESC + 1); // length data received
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	3301      	adds	r3, #1
 80061cc:	60fb      	str	r3, [r7, #12]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	1ad3      	subs	r3, r2, r3
 80061d4:	b29a      	uxth	r2, r3
 80061d6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80061da:	b29b      	uxth	r3, r3
 80061dc:	1ad3      	subs	r3, r2, r3
 80061de:	b29b      	uxth	r3, r3
 80061e0:	3b03      	subs	r3, #3
 80061e2:	b29a      	uxth	r2, r3
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	801a      	strh	r2, [r3, #0]
		if(*pu16Dest_len != PROTO_DATA_SIZE_RX)
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	881b      	ldrh	r3, [r3, #0]
 80061ec:	2b0d      	cmp	r3, #13
 80061ee:	d002      	beq.n	80061f6 <UART_get_data+0x15e>
		{
		   return false_lenght_data;
 80061f0:	f06f 0303 	mvn.w	r3, #3
 80061f4:	e000      	b.n	80061f8 <UART_get_data+0x160>
		}
		return right;
 80061f6:	2302      	movs	r3, #2
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3728      	adds	r7, #40	; 0x28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <UART_frame_data>:
 * @param u8Src_len :Lenght of source raw data, it's will be know before by programmer
 * @param pu8Dest :Create frame with source raw data, it's will be like: start mode data1 data2 (ESC byte if data is duplicate start stop or ESC).. crc1 crc2 stop
 * @param pu16Dest_len :Lenght of frame
 */
void UART_frame_data(uint8_t *pu8Src, uint8_t u8Src_len, uint8_t *pu8Dest, uint16_t *pu16Dest_len)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	607a      	str	r2, [r7, #4]
 800620a:	603b      	str	r3, [r7, #0]
 800620c:	460b      	mov	r3, r1
 800620e:	72fb      	strb	r3, [r7, #11]
	uint8_t index = 0;
 8006210:	2300      	movs	r3, #0
 8006212:	75fb      	strb	r3, [r7, #23]
	uint8_t checkESC = 0;
 8006214:	2300      	movs	r3, #0
 8006216:	75bb      	strb	r3, [r7, #22]
	uint16_t crc = 0;
 8006218:	2300      	movs	r3, #0
 800621a:	82bb      	strh	r3, [r7, #20]
	*(pu8Dest++) = PROTO_START_BYTE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	1c5a      	adds	r2, r3, #1
 8006220:	607a      	str	r2, [r7, #4]
 8006222:	2202      	movs	r2, #2
 8006224:	701a      	strb	r2, [r3, #0]

	while(index < u8Src_len) {
 8006226:	e046      	b.n	80062b6 <UART_frame_data+0xb6>
			if (*pu8Src == PROTO_START_BYTE || *pu8Src == PROTO_ESC_BYTE || *pu8Src == PROTO_END_BYTE) {
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	2b02      	cmp	r3, #2
 800622e:	d007      	beq.n	8006240 <UART_frame_data+0x40>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	2b7e      	cmp	r3, #126	; 0x7e
 8006236:	d003      	beq.n	8006240 <UART_frame_data+0x40>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	2b03      	cmp	r3, #3
 800623e:	d125      	bne.n	800628c <UART_frame_data+0x8c>
					*(pu8Dest++) = PROTO_ESC_BYTE;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	1c5a      	adds	r2, r3, #1
 8006244:	607a      	str	r2, [r7, #4]
 8006246:	227e      	movs	r2, #126	; 0x7e
 8006248:	701a      	strb	r2, [r3, #0]
					crc = crc16_floating(*(pu8Dest-1), crc);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3b01      	subs	r3, #1
 800624e:	781b      	ldrb	r3, [r3, #0]
 8006250:	8aba      	ldrh	r2, [r7, #20]
 8006252:	4611      	mov	r1, r2
 8006254:	4618      	mov	r0, r3
 8006256:	f7ff fec7 	bl	8005fe8 <crc16_floating>
 800625a:	4603      	mov	r3, r0
 800625c:	82bb      	strh	r3, [r7, #20]
					*(pu8Dest++) = (*pu8Src) ^ 0x20;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	781a      	ldrb	r2, [r3, #0]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	1c59      	adds	r1, r3, #1
 8006266:	6079      	str	r1, [r7, #4]
 8006268:	f082 0220 	eor.w	r2, r2, #32
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
					crc = crc16_floating(*(pu8Dest-1), crc);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	3b01      	subs	r3, #1
 8006274:	781b      	ldrb	r3, [r3, #0]
 8006276:	8aba      	ldrh	r2, [r7, #20]
 8006278:	4611      	mov	r1, r2
 800627a:	4618      	mov	r0, r3
 800627c:	f7ff feb4 	bl	8005fe8 <crc16_floating>
 8006280:	4603      	mov	r3, r0
 8006282:	82bb      	strh	r3, [r7, #20]
					checkESC++;
 8006284:	7dbb      	ldrb	r3, [r7, #22]
 8006286:	3301      	adds	r3, #1
 8006288:	75bb      	strb	r3, [r7, #22]
 800628a:	e00e      	b.n	80062aa <UART_frame_data+0xaa>
			}
			else {
					crc = crc16_floating(*pu8Src, crc);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	781b      	ldrb	r3, [r3, #0]
 8006290:	8aba      	ldrh	r2, [r7, #20]
 8006292:	4611      	mov	r1, r2
 8006294:	4618      	mov	r0, r3
 8006296:	f7ff fea7 	bl	8005fe8 <crc16_floating>
 800629a:	4603      	mov	r3, r0
 800629c:	82bb      	strh	r3, [r7, #20]
					*(pu8Dest++) = *pu8Src;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	1c5a      	adds	r2, r3, #1
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	68fa      	ldr	r2, [r7, #12]
 80062a6:	7812      	ldrb	r2, [r2, #0]
 80062a8:	701a      	strb	r2, [r3, #0]
			}
			++pu8Src;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	3301      	adds	r3, #1
 80062ae:	60fb      	str	r3, [r7, #12]
			index++;
 80062b0:	7dfb      	ldrb	r3, [r7, #23]
 80062b2:	3301      	adds	r3, #1
 80062b4:	75fb      	strb	r3, [r7, #23]
	while(index < u8Src_len) {
 80062b6:	7dfa      	ldrb	r2, [r7, #23]
 80062b8:	7afb      	ldrb	r3, [r7, #11]
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d3b4      	bcc.n	8006228 <UART_frame_data+0x28>
	}

	// Set the CRC

	//Casting the CRC to lets the word be assigned to a non-word boundary in memory
	*(pu8Dest++) = (char)(crc >>8);
 80062be:	8abb      	ldrh	r3, [r7, #20]
 80062c0:	0a1b      	lsrs	r3, r3, #8
 80062c2:	b299      	uxth	r1, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	1c5a      	adds	r2, r3, #1
 80062c8:	607a      	str	r2, [r7, #4]
 80062ca:	b2ca      	uxtb	r2, r1
 80062cc:	701a      	strb	r2, [r3, #0]
//	pu8Dest++;
	*(pu8Dest++) = (char)crc;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	1c5a      	adds	r2, r3, #1
 80062d2:	607a      	str	r2, [r7, #4]
 80062d4:	8aba      	ldrh	r2, [r7, #20]
 80062d6:	b2d2      	uxtb	r2, r2
 80062d8:	701a      	strb	r2, [r3, #0]
//	pu8Dest++;
	*(pu8Dest) = PROTO_END_BYTE;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2203      	movs	r2, #3
 80062de:	701a      	strb	r2, [r3, #0]
//	*(pu16Dest_len) = pu8Dest - pu8Dest_start;
	*(pu16Dest_len) = u8Src_len + checkESC + 4;   // length frame, 4 equal start crc crc stop
 80062e0:	7afb      	ldrb	r3, [r7, #11]
 80062e2:	b29a      	uxth	r2, r3
 80062e4:	7dbb      	ldrb	r3, [r7, #22]
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	4413      	add	r3, r2
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	3304      	adds	r3, #4
 80062ee:	b29a      	uxth	r2, r3
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	801a      	strh	r2, [r3, #0]
}
 80062f4:	bf00      	nop
 80062f6:	3718      	adds	r7, #24
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <__errno>:
 80062fc:	4b01      	ldr	r3, [pc, #4]	; (8006304 <__errno+0x8>)
 80062fe:	6818      	ldr	r0, [r3, #0]
 8006300:	4770      	bx	lr
 8006302:	bf00      	nop
 8006304:	20000010 	.word	0x20000010

08006308 <__libc_init_array>:
 8006308:	b570      	push	{r4, r5, r6, lr}
 800630a:	4d0d      	ldr	r5, [pc, #52]	; (8006340 <__libc_init_array+0x38>)
 800630c:	4c0d      	ldr	r4, [pc, #52]	; (8006344 <__libc_init_array+0x3c>)
 800630e:	1b64      	subs	r4, r4, r5
 8006310:	10a4      	asrs	r4, r4, #2
 8006312:	2600      	movs	r6, #0
 8006314:	42a6      	cmp	r6, r4
 8006316:	d109      	bne.n	800632c <__libc_init_array+0x24>
 8006318:	4d0b      	ldr	r5, [pc, #44]	; (8006348 <__libc_init_array+0x40>)
 800631a:	4c0c      	ldr	r4, [pc, #48]	; (800634c <__libc_init_array+0x44>)
 800631c:	f000 f93c 	bl	8006598 <_init>
 8006320:	1b64      	subs	r4, r4, r5
 8006322:	10a4      	asrs	r4, r4, #2
 8006324:	2600      	movs	r6, #0
 8006326:	42a6      	cmp	r6, r4
 8006328:	d105      	bne.n	8006336 <__libc_init_array+0x2e>
 800632a:	bd70      	pop	{r4, r5, r6, pc}
 800632c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006330:	4798      	blx	r3
 8006332:	3601      	adds	r6, #1
 8006334:	e7ee      	b.n	8006314 <__libc_init_array+0xc>
 8006336:	f855 3b04 	ldr.w	r3, [r5], #4
 800633a:	4798      	blx	r3
 800633c:	3601      	adds	r6, #1
 800633e:	e7f2      	b.n	8006326 <__libc_init_array+0x1e>
 8006340:	080067d8 	.word	0x080067d8
 8006344:	080067d8 	.word	0x080067d8
 8006348:	080067d8 	.word	0x080067d8
 800634c:	080067dc 	.word	0x080067dc

08006350 <malloc>:
 8006350:	4b02      	ldr	r3, [pc, #8]	; (800635c <malloc+0xc>)
 8006352:	4601      	mov	r1, r0
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	f000 b88d 	b.w	8006474 <_malloc_r>
 800635a:	bf00      	nop
 800635c:	20000010 	.word	0x20000010

08006360 <free>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <free+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f000 b819 	b.w	800639c <_free_r>
 800636a:	bf00      	nop
 800636c:	20000010 	.word	0x20000010

08006370 <memcpy>:
 8006370:	440a      	add	r2, r1
 8006372:	4291      	cmp	r1, r2
 8006374:	f100 33ff 	add.w	r3, r0, #4294967295
 8006378:	d100      	bne.n	800637c <memcpy+0xc>
 800637a:	4770      	bx	lr
 800637c:	b510      	push	{r4, lr}
 800637e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006382:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006386:	4291      	cmp	r1, r2
 8006388:	d1f9      	bne.n	800637e <memcpy+0xe>
 800638a:	bd10      	pop	{r4, pc}

0800638c <memset>:
 800638c:	4402      	add	r2, r0
 800638e:	4603      	mov	r3, r0
 8006390:	4293      	cmp	r3, r2
 8006392:	d100      	bne.n	8006396 <memset+0xa>
 8006394:	4770      	bx	lr
 8006396:	f803 1b01 	strb.w	r1, [r3], #1
 800639a:	e7f9      	b.n	8006390 <memset+0x4>

0800639c <_free_r>:
 800639c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800639e:	2900      	cmp	r1, #0
 80063a0:	d044      	beq.n	800642c <_free_r+0x90>
 80063a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a6:	9001      	str	r0, [sp, #4]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	f1a1 0404 	sub.w	r4, r1, #4
 80063ae:	bfb8      	it	lt
 80063b0:	18e4      	addlt	r4, r4, r3
 80063b2:	f000 f8e3 	bl	800657c <__malloc_lock>
 80063b6:	4a1e      	ldr	r2, [pc, #120]	; (8006430 <_free_r+0x94>)
 80063b8:	9801      	ldr	r0, [sp, #4]
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	b933      	cbnz	r3, 80063cc <_free_r+0x30>
 80063be:	6063      	str	r3, [r4, #4]
 80063c0:	6014      	str	r4, [r2, #0]
 80063c2:	b003      	add	sp, #12
 80063c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80063c8:	f000 b8de 	b.w	8006588 <__malloc_unlock>
 80063cc:	42a3      	cmp	r3, r4
 80063ce:	d908      	bls.n	80063e2 <_free_r+0x46>
 80063d0:	6825      	ldr	r5, [r4, #0]
 80063d2:	1961      	adds	r1, r4, r5
 80063d4:	428b      	cmp	r3, r1
 80063d6:	bf01      	itttt	eq
 80063d8:	6819      	ldreq	r1, [r3, #0]
 80063da:	685b      	ldreq	r3, [r3, #4]
 80063dc:	1949      	addeq	r1, r1, r5
 80063de:	6021      	streq	r1, [r4, #0]
 80063e0:	e7ed      	b.n	80063be <_free_r+0x22>
 80063e2:	461a      	mov	r2, r3
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	b10b      	cbz	r3, 80063ec <_free_r+0x50>
 80063e8:	42a3      	cmp	r3, r4
 80063ea:	d9fa      	bls.n	80063e2 <_free_r+0x46>
 80063ec:	6811      	ldr	r1, [r2, #0]
 80063ee:	1855      	adds	r5, r2, r1
 80063f0:	42a5      	cmp	r5, r4
 80063f2:	d10b      	bne.n	800640c <_free_r+0x70>
 80063f4:	6824      	ldr	r4, [r4, #0]
 80063f6:	4421      	add	r1, r4
 80063f8:	1854      	adds	r4, r2, r1
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	6011      	str	r1, [r2, #0]
 80063fe:	d1e0      	bne.n	80063c2 <_free_r+0x26>
 8006400:	681c      	ldr	r4, [r3, #0]
 8006402:	685b      	ldr	r3, [r3, #4]
 8006404:	6053      	str	r3, [r2, #4]
 8006406:	4421      	add	r1, r4
 8006408:	6011      	str	r1, [r2, #0]
 800640a:	e7da      	b.n	80063c2 <_free_r+0x26>
 800640c:	d902      	bls.n	8006414 <_free_r+0x78>
 800640e:	230c      	movs	r3, #12
 8006410:	6003      	str	r3, [r0, #0]
 8006412:	e7d6      	b.n	80063c2 <_free_r+0x26>
 8006414:	6825      	ldr	r5, [r4, #0]
 8006416:	1961      	adds	r1, r4, r5
 8006418:	428b      	cmp	r3, r1
 800641a:	bf04      	itt	eq
 800641c:	6819      	ldreq	r1, [r3, #0]
 800641e:	685b      	ldreq	r3, [r3, #4]
 8006420:	6063      	str	r3, [r4, #4]
 8006422:	bf04      	itt	eq
 8006424:	1949      	addeq	r1, r1, r5
 8006426:	6021      	streq	r1, [r4, #0]
 8006428:	6054      	str	r4, [r2, #4]
 800642a:	e7ca      	b.n	80063c2 <_free_r+0x26>
 800642c:	b003      	add	sp, #12
 800642e:	bd30      	pop	{r4, r5, pc}
 8006430:	20000344 	.word	0x20000344

08006434 <sbrk_aligned>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	4e0e      	ldr	r6, [pc, #56]	; (8006470 <sbrk_aligned+0x3c>)
 8006438:	460c      	mov	r4, r1
 800643a:	6831      	ldr	r1, [r6, #0]
 800643c:	4605      	mov	r5, r0
 800643e:	b911      	cbnz	r1, 8006446 <sbrk_aligned+0x12>
 8006440:	f000 f88c 	bl	800655c <_sbrk_r>
 8006444:	6030      	str	r0, [r6, #0]
 8006446:	4621      	mov	r1, r4
 8006448:	4628      	mov	r0, r5
 800644a:	f000 f887 	bl	800655c <_sbrk_r>
 800644e:	1c43      	adds	r3, r0, #1
 8006450:	d00a      	beq.n	8006468 <sbrk_aligned+0x34>
 8006452:	1cc4      	adds	r4, r0, #3
 8006454:	f024 0403 	bic.w	r4, r4, #3
 8006458:	42a0      	cmp	r0, r4
 800645a:	d007      	beq.n	800646c <sbrk_aligned+0x38>
 800645c:	1a21      	subs	r1, r4, r0
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f87c 	bl	800655c <_sbrk_r>
 8006464:	3001      	adds	r0, #1
 8006466:	d101      	bne.n	800646c <sbrk_aligned+0x38>
 8006468:	f04f 34ff 	mov.w	r4, #4294967295
 800646c:	4620      	mov	r0, r4
 800646e:	bd70      	pop	{r4, r5, r6, pc}
 8006470:	20000348 	.word	0x20000348

08006474 <_malloc_r>:
 8006474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006478:	1ccd      	adds	r5, r1, #3
 800647a:	f025 0503 	bic.w	r5, r5, #3
 800647e:	3508      	adds	r5, #8
 8006480:	2d0c      	cmp	r5, #12
 8006482:	bf38      	it	cc
 8006484:	250c      	movcc	r5, #12
 8006486:	2d00      	cmp	r5, #0
 8006488:	4607      	mov	r7, r0
 800648a:	db01      	blt.n	8006490 <_malloc_r+0x1c>
 800648c:	42a9      	cmp	r1, r5
 800648e:	d905      	bls.n	800649c <_malloc_r+0x28>
 8006490:	230c      	movs	r3, #12
 8006492:	603b      	str	r3, [r7, #0]
 8006494:	2600      	movs	r6, #0
 8006496:	4630      	mov	r0, r6
 8006498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800649c:	4e2e      	ldr	r6, [pc, #184]	; (8006558 <_malloc_r+0xe4>)
 800649e:	f000 f86d 	bl	800657c <__malloc_lock>
 80064a2:	6833      	ldr	r3, [r6, #0]
 80064a4:	461c      	mov	r4, r3
 80064a6:	bb34      	cbnz	r4, 80064f6 <_malloc_r+0x82>
 80064a8:	4629      	mov	r1, r5
 80064aa:	4638      	mov	r0, r7
 80064ac:	f7ff ffc2 	bl	8006434 <sbrk_aligned>
 80064b0:	1c43      	adds	r3, r0, #1
 80064b2:	4604      	mov	r4, r0
 80064b4:	d14d      	bne.n	8006552 <_malloc_r+0xde>
 80064b6:	6834      	ldr	r4, [r6, #0]
 80064b8:	4626      	mov	r6, r4
 80064ba:	2e00      	cmp	r6, #0
 80064bc:	d140      	bne.n	8006540 <_malloc_r+0xcc>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	4631      	mov	r1, r6
 80064c2:	4638      	mov	r0, r7
 80064c4:	eb04 0803 	add.w	r8, r4, r3
 80064c8:	f000 f848 	bl	800655c <_sbrk_r>
 80064cc:	4580      	cmp	r8, r0
 80064ce:	d13a      	bne.n	8006546 <_malloc_r+0xd2>
 80064d0:	6821      	ldr	r1, [r4, #0]
 80064d2:	3503      	adds	r5, #3
 80064d4:	1a6d      	subs	r5, r5, r1
 80064d6:	f025 0503 	bic.w	r5, r5, #3
 80064da:	3508      	adds	r5, #8
 80064dc:	2d0c      	cmp	r5, #12
 80064de:	bf38      	it	cc
 80064e0:	250c      	movcc	r5, #12
 80064e2:	4629      	mov	r1, r5
 80064e4:	4638      	mov	r0, r7
 80064e6:	f7ff ffa5 	bl	8006434 <sbrk_aligned>
 80064ea:	3001      	adds	r0, #1
 80064ec:	d02b      	beq.n	8006546 <_malloc_r+0xd2>
 80064ee:	6823      	ldr	r3, [r4, #0]
 80064f0:	442b      	add	r3, r5
 80064f2:	6023      	str	r3, [r4, #0]
 80064f4:	e00e      	b.n	8006514 <_malloc_r+0xa0>
 80064f6:	6822      	ldr	r2, [r4, #0]
 80064f8:	1b52      	subs	r2, r2, r5
 80064fa:	d41e      	bmi.n	800653a <_malloc_r+0xc6>
 80064fc:	2a0b      	cmp	r2, #11
 80064fe:	d916      	bls.n	800652e <_malloc_r+0xba>
 8006500:	1961      	adds	r1, r4, r5
 8006502:	42a3      	cmp	r3, r4
 8006504:	6025      	str	r5, [r4, #0]
 8006506:	bf18      	it	ne
 8006508:	6059      	strne	r1, [r3, #4]
 800650a:	6863      	ldr	r3, [r4, #4]
 800650c:	bf08      	it	eq
 800650e:	6031      	streq	r1, [r6, #0]
 8006510:	5162      	str	r2, [r4, r5]
 8006512:	604b      	str	r3, [r1, #4]
 8006514:	4638      	mov	r0, r7
 8006516:	f104 060b 	add.w	r6, r4, #11
 800651a:	f000 f835 	bl	8006588 <__malloc_unlock>
 800651e:	f026 0607 	bic.w	r6, r6, #7
 8006522:	1d23      	adds	r3, r4, #4
 8006524:	1af2      	subs	r2, r6, r3
 8006526:	d0b6      	beq.n	8006496 <_malloc_r+0x22>
 8006528:	1b9b      	subs	r3, r3, r6
 800652a:	50a3      	str	r3, [r4, r2]
 800652c:	e7b3      	b.n	8006496 <_malloc_r+0x22>
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	42a3      	cmp	r3, r4
 8006532:	bf0c      	ite	eq
 8006534:	6032      	streq	r2, [r6, #0]
 8006536:	605a      	strne	r2, [r3, #4]
 8006538:	e7ec      	b.n	8006514 <_malloc_r+0xa0>
 800653a:	4623      	mov	r3, r4
 800653c:	6864      	ldr	r4, [r4, #4]
 800653e:	e7b2      	b.n	80064a6 <_malloc_r+0x32>
 8006540:	4634      	mov	r4, r6
 8006542:	6876      	ldr	r6, [r6, #4]
 8006544:	e7b9      	b.n	80064ba <_malloc_r+0x46>
 8006546:	230c      	movs	r3, #12
 8006548:	603b      	str	r3, [r7, #0]
 800654a:	4638      	mov	r0, r7
 800654c:	f000 f81c 	bl	8006588 <__malloc_unlock>
 8006550:	e7a1      	b.n	8006496 <_malloc_r+0x22>
 8006552:	6025      	str	r5, [r4, #0]
 8006554:	e7de      	b.n	8006514 <_malloc_r+0xa0>
 8006556:	bf00      	nop
 8006558:	20000344 	.word	0x20000344

0800655c <_sbrk_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_sbrk_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fb fbfa 	bl	8001d60 <_sbrk>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_sbrk_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_sbrk_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	2000034c 	.word	0x2000034c

0800657c <__malloc_lock>:
 800657c:	4801      	ldr	r0, [pc, #4]	; (8006584 <__malloc_lock+0x8>)
 800657e:	f000 b809 	b.w	8006594 <__retarget_lock_acquire_recursive>
 8006582:	bf00      	nop
 8006584:	20000350 	.word	0x20000350

08006588 <__malloc_unlock>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__malloc_unlock+0x8>)
 800658a:	f000 b804 	b.w	8006596 <__retarget_lock_release_recursive>
 800658e:	bf00      	nop
 8006590:	20000350 	.word	0x20000350

08006594 <__retarget_lock_acquire_recursive>:
 8006594:	4770      	bx	lr

08006596 <__retarget_lock_release_recursive>:
 8006596:	4770      	bx	lr

08006598 <_init>:
 8006598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800659a:	bf00      	nop
 800659c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800659e:	bc08      	pop	{r3}
 80065a0:	469e      	mov	lr, r3
 80065a2:	4770      	bx	lr

080065a4 <_fini>:
 80065a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065a6:	bf00      	nop
 80065a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065aa:	bc08      	pop	{r3}
 80065ac:	469e      	mov	lr, r3
 80065ae:	4770      	bx	lr
